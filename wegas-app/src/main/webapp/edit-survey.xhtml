<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets" 
      xmlns:c="http://xmlns.jcp.org/jsp/jstl/core">

    <ui:composition template="wegas-app/jsf/editor-default.xhtml">
        <ui:define name="pageUri">/wegas-app/db/wegas-editsurvey-layout.json</ui:define>

        <ui:define name="app-init">
            <c:set var="extraBodyClass" value="wegas-editmode wegas-editsurveymode"/>
            <c:set var="wegasMode" value="EDIT"/>
        </ui:define>

        <script>//<ui:define name = "editorFooter"><![CDATA[
            Y.Wegas.app.once("preRender", function() {
                var surveyId = +"#{param['surveyId']}";
                if (surveyId > 0) {
                    var descr = Y.Wegas.Facade.Variable.cache.findById(surveyId);
                    if (descr) {
                        YUI_config.Wegas.dataSelector = {
                            key: 'id', 
                            val: surveyId
                        };
                    }
                }
            });

            Y.Wegas.app.once("render", function() {
                var gameModel = Y.Wegas.Facade.Game.cache.getCurrentGame(),
                    isReadOnly = "#{param['readonly']}";

                if (isReadOnly.toLowerCase() === "true"){
                    Y.one("body").addClass("wegas-readonly-editmode");
                }

                // Prepare Preview of the given survey:
                if (!YUI_config.Wegas.dataSelector) {
                    return;
                }
                var descr = Y.Wegas.Facade.Variable.cache.findById(YUI_config.Wegas.dataSelector.val),
                    inst = descr.getInstance(),
                    container = Y.one(".wegas-playerview .wegas-pageloader-content");
                if (!inst || !container) {
                    return;
                }

                // In increasing order of progress, status of a given survey:
                var ORCHESTRATION_PROGRESS = {
                    NOT_STARTED: "NOT_STARTED",
                    REQUESTED: "REQUESTED",
                    ONGOING: "ONGOING",
                    COMPLETED: "COMPLETED",
                    CLOSED: "CLOSED"
                };
                
                function onUpdatedSurveyInstance(e) {
                    var entity = e.entity,
                        newStatus = entity.get("status"),
                        panel;
                    if (newStatus === ORCHESTRATION_PROGRESS.CLOSED) {
                        panel = Y.Wegas.Panel.alert("Restarting the survey for you.<br>Please wait...");
                        // Wait until the current transaction is over:
                        Y.later(2000, this, function() {
                            var script = "GameModelFacade.reset(self.getTeam());",
                                cfg = {
                                    on: {
                                        success: Y.bind(function(e) {
                                            Y.later(2000, this, function() {
                                                panel && panel.destroy();
                                            });
                                        }, this),
                                        failure: Y.bind(function(e) {
                                            panel && panel.destroy();
                                            Y.Wegas.Panel.alert("Something went wrong. Could not restart the survey.");
                                        }, this)
                                    }
                                };
                            Y.Wegas.Facade.Variable.script.remoteEval(script, cfg);
                        });
                    } else if (newStatus === ORCHESTRATION_PROGRESS.NOT_STARTED) {
                        // Start survey after the current transaction is over:
                        Y.later(2000, this, function() {
                            sendSurveyStatusChange(descr, ORCHESTRATION_PROGRESS.REQUESTED);
                        });
                    }
                }
                
                // Sends an update to the survey instance of the given descriptor.
                function sendSurveyStatusChange(desc, surveyStatus, cb) {
                    var inst = desc.getInstance();
                    inst.set("status", surveyStatus);

                    var config = {
                        request: "/" + desc.get("id") + "/VariableInstance/" + inst.get("id"),
                        cfg: {
                            updateCache: true,
                            method: "put",
                            data: inst
                        },
                        on: {
                            success: Y.bind(function(e) {
                                cb && cb.call(this, e);
                            }, this),
                            failure: Y.bind(function(e) {
                                cb && cb.call(this, e);
                                this.showMessage("error", "Something went wrong in sendSurveyStatusChange");
                            }, this)
                        }
                    };
                    Y.Wegas.Facade.Variable.sendRequest(config);
                }
               
                
                Y.Wegas.Facade.Instance.after(inst.get("id") + ":updatedInstance", onUpdatedSurveyInstance, this);
                
                Y.use(["wegas-survey-widgets", "wegas-popuplistener"], function(Y) {
                    var status = inst.get("status");
                    // We are loading the editor. Force start of survey if needed:
                    if (status === ORCHESTRATION_PROGRESS.NOT_STARTED ||
                        status === ORCHESTRATION_PROGRESS.CLOSED) {
                        sendSurveyStatusChange(descr, ORCHESTRATION_PROGRESS.REQUESTED);
                    }
                });
            });
        
            // Update editor title:
            Y.Wegas.app.after("render", function() {
                if (!YUI_config.Wegas.dataSelector) {
                    return;
                }
                
                function getFriendlyVarName(v) {
                    var name = '',
                        label = I18n.t(v.get("label"));
                    if (v.get("editorTag")) {
                        name += v.get("editorTag");
                    }
                    if (name && label) {
                        name += ' - ';
                    }
                    if (label) {
                        name += label;
                    }
                    if (!name) {
                        name = v.get("name");
                    }
                    return name;
                }

                var descr = Y.Wegas.Facade.Variable.cache.findById(YUI_config.Wegas.dataSelector.val);
                Y.all(".wegas-title").setContent(getFriendlyVarName(descr));
            });

        //]]></ui:define></script>

    </ui:composition>
</html>

{
    "@class": "GameModel",
    "name": "Chess",
    "childVariableDescriptors": [
        {
            "@class": "ObjectDescriptor",
            "name": "pieces",
            "label": "Pieces",
            "defaultInstance": {
                "@class": "ObjectInstance",
                "properties": {}
            },
            "scope": {
                "@class": "PlayerScope",
                "broadcastScope": "TeamScope"
            },
            "description": "",
            "properties": {}
        },
        {
            "@class": "TriggerDescriptor",
            "name": "startGameTrigger",
            "label": "Start game",
            "defaultInstance": {
                "@class": "TriggerInstance",
                "currentStateId": 1,
                "enabled": true,
                "transitionHistory": []
            },
            "scope": {
                "@class": "TeamScope",
                "broadcastScope": "TeamScope"
            },
            "oneShot": true,
            "triggerEvent": {
                "@class": "Script",
                "content": "self.getTeam().getPlayers().size() > 1",
                "language": "JavaScript"
            },
            "postTriggerEvent": {
                "@class": "Script",
                "content": "startGame();",
                "language": "JavaScript"
            }
        },
        {
            "@class": "NumberDescriptor",
            "name": "currentTurn",
            "label": "Current turn",
            "defaultInstance": {
                "@class": "NumberInstance",
                "history": [],
                "value": 0
            },
            "scope": {
                "@class": "GameScope",
                "broadcastScope": "GameScope"
            },
            "minValue": null,
            "maxValue": null
        }
    ],
    "scriptLibrary": {
        "default": {
            "@class": "GameModelContent",
            "contentType": null,
            "content": "/*\r\n * Wegas\r\n * http://wegas.albasim.ch/\r\n *\r\n * Copyright (c) 2013 School of Business and Engineering Vaud, Comem\r\n * Licensed under the MIT License\r\n */\r\n/**\r\n * @author Francois-Xavier Aeberhard <fx@red-agent.com>\r\n */\r\n\r\nimportPackage(javax.naming); \r\n\r\nfunction EvtTarget() {\r\n    this.evts = {};\r\n}\r\n\r\nEvtTarget.prototype = {\r\n    on: function (evt, fn, scope) {\r\n        this.evts[evt] = this.evts[evt] || [];\r\n        this.evts[evt].push({\r\n            fn: fn,\r\n            scope: scope || this\r\n        });\r\n    },\r\n    fire: function (evt, args) {\r\n        var i, evts = this.evts[evt];\r\n        for (i = 0; i < evts.length; i += 1) {\r\n            evts[i].fn(args);\r\n        }\r\n    }\r\n};\r\nvar eventManager = new EvtTarget();\r\n\r\nfunction lookupBean(name) {\r\n    var ctx = new InitialContext();\r\n    return ctx.lookup(\"java:module/\" + name);\r\n}\r\n\r\nfunction startGame() {\r\n    println(\"Starting new chess game\");\r\n    //VariableDescriptorFacade.find(gameModel, \"currentTurn\").add(self, 1);\r\n    var players = self.getTeam().getPlayers(),\r\n    secPlayer = players.get(1),\r\n    firstPlayer = players.get(0),\r\n    pieces = VariableDescriptorFacade.find(gameModel, \"pieces\"),\r\n    currentTurn = VariableDescriptorFacade.find(gameModel, \"currentTurn\").getInstance(self);\r\n    \r\n    currentTurn.value = 1;    \r\n    \r\n    pieces.setProperty(firstPlayer, \"tower1\", \"A1\");\r\n    pieces.setProperty(firstPlayer, \"horse1\", \"B1\");\r\n    pieces.setProperty(firstPlayer, \"bishop1\", \"C1\");\r\n    pieces.setProperty(firstPlayer, \"queen\", \"D1\");\r\n    pieces.setProperty(firstPlayer, \"king\", \"E1\");\r\n    pieces.setProperty(firstPlayer, \"bishop2\", \"F1\");\r\n    pieces.setProperty(firstPlayer, \"horse2\", \"G1\");\r\n    pieces.setProperty(firstPlayer, \"tower2\", \"H1\");\r\n    pieces.setProperty(firstPlayer, \"pawn1\", \"A2\");\r\n    pieces.setProperty(firstPlayer, \"pawn2\", \"B2\");\r\n    pieces.setProperty(firstPlayer, \"pawn3\", \"C2\");\r\n    pieces.setProperty(firstPlayer, \"pawn4\", \"D2\");\r\n    pieces.setProperty(firstPlayer, \"pawn5\", \"E2\");\r\n    pieces.setProperty(firstPlayer, \"pawn6\", \"F2\");\r\n    pieces.setProperty(firstPlayer, \"pawn7\", \"G2\");\r\n    pieces.setProperty(firstPlayer, \"pawn8\", \"H2\");\r\n    \r\n    pieces.setProperty(secPlayer, \"tower1\", \"A8\");\r\n    pieces.setProperty(secPlayer, \"horse1\", \"B8\");\r\n    pieces.setProperty(secPlayer, \"bishop1\", \"C8\");\r\n    pieces.setProperty(secPlayer, \"queen\", \"D8\");\r\n    pieces.setProperty(secPlayer, \"king\", \"E8\");\r\n    pieces.setProperty(secPlayer, \"bishop2\", \"F8\");\r\n    pieces.setProperty(secPlayer, \"horse2\", \"G8\");\r\n    pieces.setProperty(secPlayer, \"tower2\", \"H8\");\r\n    pieces.setProperty(secPlayer, \"pawn1\", \"A7\");\r\n    pieces.setProperty(secPlayer, \"pawn2\", \"B7\");\r\n    pieces.setProperty(secPlayer, \"pawn3\", \"C7\");\r\n    pieces.setProperty(secPlayer, \"pawn4\", \"D7\");\r\n    pieces.setProperty(secPlayer, \"pawn5\", \"E7\");\r\n    pieces.setProperty(secPlayer, \"pawn6\", \"F7\");\r\n    pieces.setProperty(secPlayer, \"pawn7\", \"G7\");\r\n    pieces.setProperty(secPlayer, \"pawn8\", \"H7\");\r\n}\r\n\r\nfunction move(piece, position) {\r\n    \r\n    var players = self.getTeam().getPlayers(),\r\n    secPlayer = players.get(1),\r\n    firstPlayer = players.get(0),\r\n    pieces = VariableDescriptorFacade.find(gameModel, \"pieces\"),\r\n    currentTurn = VariableDescriptorFacade.find(gameModel, \"currentTurn\").getInstance(self);\r\n    \r\n    pieces.setProperty(self, piece, position);\r\n    //pieces.setProperty(player)\r\n    currentTurn.value = -currentTurn.value;\r\n}\r\nfunction destroy(piece) {    \r\n    var players = self.getTeam().getPlayers(),\r\n    secPlayer = players.get(1),\r\n    firstPlayer = players.get(0),\r\n    otherPlayer = (self === firstPlayer)? secPlayer : firstPlayer,\r\n    pieces = VariableDescriptorFacade.find(gameModel, \"pieces\");\r\n    \r\n    println(\"destroying\"+otherPlayer+\";\"+self);\r\n    pieces.getInstance(otherPlayer).properties.remove(piece);\r\n    //pieces.removeProperty(otherPlayer, piece);\r\n}\r\n"
        }
    },
    "cssLibrary": {
        "Default": {
            "@class": "GameModelContent",
            "contentType": null,
            "content": "/** Chat styles **/\r\n.wegas-chat {\r\n    /*height: 100%;*/\r\n    position: absolute;\r\n    top: 0px;\r\n    right: 0;\r\n    width: 300px;\r\n    bottom:0px;\r\n    background: darkgray;\r\n}\r\n\r\n/* Share link styles */\r\n.wegas-playerlink-buttons {\r\n    position: absolute;\r\n    top: 5px;\r\n    left: 5px;\r\n}\r\n.wegas-playerlink-buttons-content > div{\r\n    float: left;\r\n}\r\n.wegas-playerlink-buttons .playerlink-label {\r\n    font-weight: bold;\r\n    font-size: 15px;\r\n    padding: 10px;\r\n}\r\n\r\n.wegas-playerlink-buttons input {\r\n    padding: 3px;\r\n    margin-top:6px;\r\n    width: 500px !important;\r\n}\r\n/* Chess board styles */\r\n.wegas-chessboard {\r\n    background: url(../../wegas-chess/images/EmptyBoard.gif) no-repeat;\r\n    background-size: 600px auto;\r\n    width: 557px;\r\n    height: 600px;\r\n    padding: 11px 37px;\r\n    position: relative;\r\n    position: absolute;\r\n    top: 40px;\r\n}\r\n.wegas-chessboard-content {\r\n    position:relative;\r\n}\r\n.chess-label-p1,\r\n.chess-label-p2 {\r\n    position: absolute;\r\n    font-size: 2em;\r\n    top: 8px;\r\n    left: 607px;\r\n    font-weight: bolder;\r\n    padding: 5px;\r\n    width: 250px;\r\n}\r\n.chess-label-p1 {\r\n    top: 522px;\r\n}\r\n.wegas-chessboard .chess-status {\r\n    position: absolute;\r\n    font-size: 1.5em;\r\n    top: 259px;\r\n    left: 607px;\r\n    font-style: italic;\r\n    width: 264px;\r\n}\r\n.wegas-chessboard-content {\r\n    position: relative;\r\n}\r\n.wegas-devmode .wegas-chessboard-content,\r\n.wegas-devmode .chess-piece {\r\n    box-shadow: 0 0 2px black;\r\n}\r\n.chess-piece, .chess-move {\r\n    position: absolute;\r\n}\r\n.chess-piece {\r\n    background: transparent url(../../wegas-chess/images/pieces.png) no-repeat;\r\n    background-size: 386px;\r\n    background-position:2px -88px;\r\n}\r\n.chess-move {\r\n    background-color: rgba(7, 250, 20, 0.2);\r\n    cursor:pointer;\r\n}\r\n.chess-move:hover {\r\n    background-color: rgba(7, 250, 20, 0.4);\r\n    box-shadow: 1px 1px 2px black;\r\n}\r\n.chess-playing .chess-piece-playable:hover {\r\n    background-color: rgba(7, 38, 68, 0.2);\r\n    box-shadow: 1px 1px 2px black;\r\n    cursor:pointer;\r\n}\r\n.chess-piece-selected,\r\n.chess-piece-selected:hover {\r\n    background-color: rgba(7, 38, 68, 0.4);\r\n    box-shadow: 1px 1px 2px black;\r\n}\r\n/* White pieces */\r\n.chess-tower {\r\n    background-position:2px -88px;\r\n}\r\n.chess-bishop {\r\n    background-position: -62px -88px;\r\n}\r\n.chess-queen {\r\n    background-position: -127px -88px;\r\n}\r\n.chess-king {\r\n    background-position: -191px -88px;\r\n}\r\n.chess-horse {\r\n    background-position: -257px -88px;\r\n}\r\n.chess-pawn {\r\n    background-position: -319px -88px;\r\n}\r\n/* Black pieces */\r\n.chess-tower.chess-side-1 {\r\n    background-position:2px -9px;\r\n}\r\n.chess-bishop.chess-side-1 {\r\n    background-position: -62px -9px;\r\n}\r\n.chess-queen.chess-side-1 {\r\n    background-position: -127px -9px;\r\n}\r\n.chess-king.chess-side-1 {\r\n    background-position: -191px -9px;\r\n}\r\n.chess-horse.chess-side-1 {\r\n    background-position: -257px -9px;\r\n}\r\n.chess-pawn.chess-side-1 {\r\n    background-position: -319px -9px;\r\n}\r\n"
        }
    },
    "clientScriptLibrary": {
        "ChessBoard": {
            "@class": "GameModelContent",
            "contentType": null,
            "content": "var CONTENTBOX = \"contentBox\", ChessBoard;\r\n\r\nChessBoard = Y.Base.create(\"wegas-chessboard\", Y.Widget, [Y.WidgetChild, Y.Wegas.Widget, Y.Wegas.Editable], {\r\n    BOUNDING_TEMPLATE: \"<div>\"\r\n            + \"<div class=\\\"chess-label-p2\\\"></div>\"\r\n            + \"<div class=\\\"chess-status\\\">Loading</div>\"\r\n            + \"<div class=\\\"chess-label-p1\\\"></div></div>\",\r\n    BOARDSIZE: 8,\r\n    /**\r\n     *\r\n     */\r\n    initializer: function() {\r\n        this.side = 0;\r\n    },\r\n    /**\r\n     *\r\n     */\r\n    bindUI: function() {\r\n        var cb = this.get(CONTENTBOX),\r\n                bb = this.get(\"boundingBox\");\r\n\r\n        this.updateHandler = Y.Wegas.Facade.VariableDescriptor.after(\"update\", this.syncUI, this);\r\n\r\n        bb.delegate(\"click\", function(e) {                                  // Piece selection: display available move for selected\r\n            if (e.target === this.currentTarget) {                          // Unselect piece if we click for a second time on it\r\n                this.unselectCurrentPiece();\r\n                return;\r\n            }\r\n            this.unselectCurrentPiece();\r\n            this.currentTarget = e.target;\r\n\r\n            e.target.addClass(\"chess-piece-selected\");\r\n            var i, moves = this.getAvailableMoves(e.target.cfg);\r\n\r\n            for (i = 0; i < moves.length; i += 1) {\r\n                var cNode = Y.Node.create(\"<div class=\\\"chess-move\\\"></div>\");\r\n                cNode.setStyles(this.formatPos(moves[i]));\r\n                cNode.cfg = moves[i];\r\n                cb.appendChild(cNode);\r\n            }\r\n        }, \".chess-playing .chess-piece-playable\", this);\r\n\r\n        cb.delegate(\"click\", function(e) {                                  // Move selection: move selected piece to target position\r\n\r\n            var colidee = this.getPieceAt(e.target.cfg),\r\n                    script = \"move(\\\"\" + this.currentTarget.cfg.name + \"\\\", \\\"\" + this.pos2string(e.target.cfg) + \"\\\");\";\r\n\r\n            if (colidee) {                                                  // If there is a clolidee\r\n                script += \"destroy(\\\"\" + colidee.name + \"\\\");\";             // destroy it\r\n            }\r\n\r\n            Y.Wegas.Facade.VariableDescriptor.sendRequest({\r\n                request: \"/Script/Run/\" + Y.Wegas.app.get('currentPlayer'),\r\n                cfg: {\r\n                    method: \"POST\",\r\n                    data: {\r\n                        \"@class\": \"Script\",\r\n                        language: \"JavaScript\",\r\n                        content: script\r\n                    }\r\n                }\r\n            });\r\n        }, \".chess-move\", this);\r\n    },\r\n    /**\r\n     *\r\n     */\r\n    syncUI: function() {\r\n        Y.log(\"syncUI()\", \"info\", \"Wegas.ChessBoard\");\r\n\r\n        this.unselectCurrentPiece();\r\n\r\n        var i, cNode, cb = this.get(CONTENTBOX),\r\n                bb = this.get(\"boundingBox\"),\r\n                pieces = this.getPieces(),\r\n                treated = [],\r\n                allPiecesNodes = cb.all(\".chess-piece\"),\r\n                currentTurn = Y.Wegas.Facade.VariableDescriptor.cache.find(\"name\", \"currentTurn\").getInstance().get(\"value\"),\r\n                statusNode = bb.one(\".chess-status\"),\r\n                currentGame = Y.Wegas.Facade.Game.cache.getCurrentGame(),\r\n                players = currentGame.get(\"teams\")[0].get(\"players\"),\r\n                cPlayerId = Y.Wegas.app.get(\"currentPlayer\");\r\n\r\n        this.side = 0;                                                      // Determine which side\r\n        if (players[0].get(\"id\") === cPlayerId) {\r\n            this.side = 1;\r\n        } else if (players[1].get(\"id\") === cPlayerId) {\r\n            this.side = -1;\r\n        }\r\n\r\n        cb.removeClass(\"chess-playing\");\r\n        if (currentTurn === 0) {\r\n            statusNode.setContent(\"Waiting for a second player to join before starting game. You will need to refresh page to start game.\");\r\n            return;\r\n        } else if (currentTurn !== this.side) {\r\n            statusNode.setContent(\"Waiting for opponent's move\");\r\n        } else {\r\n            statusNode.setContent(\"Your turn to play\");\r\n            cb.addClass(\"chess-playing\");\r\n        }\r\n\r\n        bb.one(\".chess-label-p1\").setContent(players[0].get(\"name\"));\r\n        bb.one(\".chess-label-p2\").setContent(players[1].get(\"name\"));\r\n\r\n        for (i = 0; i < pieces.length; i += 1) {\r\n            var cfg = pieces[i],\r\n                    cNode = cb.one(\".chess-piece-\" + cfg.name + cfg.side);\r\n\r\n            if (cNode) {                                                    // case 1: Piece has been moved\r\n                treated.push(cNode);\r\n                if (cfg.x !== cNode.cfg.x || cfg.y !== cNode.cfg.y) {\r\n                    cNode.transition(Y.mix({\r\n                        easing: 'ease-out',\r\n                        duration: 0.75\r\n                    }, this.formatPos(cfg)));\r\n\r\n                    cNode.cfg = Y.mix(cfg, cNode.cfg);\r\n                }\r\n            } else {                                                        // Case 2: Piece was added to the board (start game)\r\n                this.renderPiece(cfg);\r\n            }\r\n        }\r\n\r\n        for (i = 0; i < allPiecesNodes.size(); i += 1) {                    // Case 3: Piece is not present anymore, we destroy it\r\n            var item = allPiecesNodes.item(i);\r\n            if (treated.indexOf(item) === -1) {\r\n                item.remove(true);\r\n            }\r\n        }\r\n    },\r\n    destructor: function() {\r\n        this.updateHandler.detach();\r\n    },\r\n    /**\r\n     *\r\n     */\r\n    getPieces: function() {\r\n        var i, j,\r\n                pieces = Y.Wegas.Facade.VariableDescriptor.cache.find(\"name\", \"pieces\"),\r\n                cPlayerPieces,\r\n                currentGame = Y.Wegas.Facade.Game.cache.getCurrentGame(),\r\n                players = currentGame.get(\"teams\")[0].get(\"players\"),\r\n                side = 1,\r\n                ret = [];\r\n\r\n        if (players.length < 2) {\r\n            return [];\r\n        }\r\n\r\n        for (j = 0; j < 2; j += 1) {                                        // Only render pieces for the two first players, other are spectators\r\n            cPlayerPieces = pieces.getInstance(players[j].get(\"id\")).get(\"properties\");\r\n\r\n            for (i in cPlayerPieces) {\r\n                var cfg = Y.mix(this.string2pos(cPlayerPieces[i]), {\r\n                    side: side,\r\n                    name: i,\r\n                    type: this.name2type(i)\r\n                });\r\n                ret.push(cfg);\r\n            }\r\n            side = -1;\r\n        }\r\n        return ret;\r\n    },\r\n    /**\r\n     *\r\n     */\r\n    getPieceAt: function(pos) {\r\n        return Y.Array.find(this.getPieces(), function(item) {\r\n            return item.x === pos.x && item.y === pos.y;\r\n        });\r\n    },\r\n    /**\r\n     *\r\n     */\r\n    getAvailableMoves: function(cfg) {\r\n        var i, j, moves = [], finalMoves = [],\r\n                genLine = function(dirs, length) {\r\n            for (i = 0; i < dirs.length; i += 1) {\r\n                var d = dirs[i], collidee = null;\r\n                for (j = 1; j < length && !collidee; j += 1) {\r\n                    var m = {\r\n                        x: cfg.x + (j * d.x),\r\n                        y: cfg.y + (j * d.y)\r\n                    };\r\n                    collidee = this.getPieceAt(m);\r\n                    if (this.isValidMove(m, cfg)) {\r\n                        moves.push(m);\r\n                    }\r\n                }\r\n            }\r\n            return moves;\r\n        };\r\n\r\n        switch (cfg.type) {\r\n            case \"horse\":\r\n                moves.push({x: cfg.x + 1, y: cfg.y + 2});\r\n                moves.push({x: cfg.x - 1, y: cfg.y + 2});\r\n                moves.push({x: cfg.x + 1, y: cfg.y - 2});\r\n                moves.push({x: cfg.x - 1, y: cfg.y - 2});\r\n                moves.push({x: cfg.x + 2, y: cfg.y + 1});\r\n                moves.push({x: cfg.x - 2, y: cfg.y + 1});\r\n                moves.push({x: cfg.x + 2, y: cfg.y - 1});\r\n                moves.push({x: cfg.x - 2, y: cfg.y - 1});\r\n                break;\r\n\r\n            case \"queen\":\r\n                var dirs = [{x: 1, y: 0}, {x: 0, y: 1}, {x: -1, y: 0}, {x: 0, y: -1},\r\n                    {x: 1, y: 1}, {x: -1, y: 1}, {x: 1, y: -1}, {x: -1, y: -1}];\r\n                moves = genLine.call(this, dirs, 8);\r\n                break;\r\n\r\n            case \"bishop\":\r\n                var dirs = [{x: 1, y: 1}, {x: -1, y: 1}, {x: 1, y: -1}, {x: -1, y: -1}];\r\n                moves = genLine.call(this, dirs, 8);\r\n                break;\r\n\r\n            case \"king\":\r\n                var dirs = [{x: 1, y: 0}, {x: 0, y: 1}, {x: -1, y: 0}, {x: 0, y: -1},\r\n                    {x: 1, y: 1}, {x: 1, y: -1}, {x: -1, y: 1}, {x: -1, y: -1}];\r\n                moves = genLine.call(this, dirs, 2);\r\n                break;\r\n\r\n            case \"tower\":\r\n                var dirs = [{x: 1, y: 0}, {x: 0, y: 1}, {x: -1, y: 0}, {x: 0, y: -1}];\r\n                moves = genLine.call(this, dirs, 8);\r\n                break;\r\n\r\n            case \"pawn\":                                                    // Pawns\r\n                var i, factor = ((cfg.y === 1 && cfg.side === 1)\r\n                        || (cfg.y === 6 && cfg.side === -1)) ? 3 : 2; // When it's their 1st move, pawns can move by 2,\r\n\r\n                moves = genLine.call(this, [{x: 0, y: cfg.side}], factor);\r\n\r\n                for (i = 0; i < 2; i += 1) {                                // Pawn eat on til up, left and right\r\n                    var factor = (i === 0) ? 1 : -1,\r\n                            m = {\r\n                        x: cfg.x + factor,\r\n                        y: cfg.y + this.side\r\n                    };\r\n                    if (this.getPieceAt(m)) {\r\n                        moves.push(m);\r\n                    }\r\n                    //colidee = this.getPieceAt({                           // Pawn also eat \"En passant\"\r\n                    //    x: cfg.x + factor,\r\n                    //    y: cfg.y\r\n                    //});\r\n                    //if (colidee && colidee.side !== this.side) {\r\n                    //    m.enPassant = true;\r\n                    //    moves.push(m);\r\n                    //}\r\n                }\r\n                break;\r\n\r\n            default:\r\n                Y.log(\"Unknow piece type\", \"error\", \"Wegas.ChessBoard\");\r\n                break\r\n        }\r\n\r\n        for (i = 0; i < moves.length; i += 1) {                             // Finally, remove any move that is on an enemy\r\n            var m = moves[i];                                               // or out of the board\r\n            if (this.isValidMove(m, cfg)) {\r\n                finalMoves.push(m);\r\n            }\r\n        }\r\n        return finalMoves;\r\n    },\r\n    /**\r\n     *\r\n     */\r\n    isValidMove: function(pos, cfg) {\r\n        var collidee = this.getPieceAt(pos);\r\n        return (pos.x >= 0 && pos.x < 8\r\n                && pos.y >= 0 && pos.y < 8\r\n                && (!collidee ||\r\n                (collidee.side !== this.side\r\n                        && collidee.type !== \"king\"\r\n                        && (cfg.type !== \"pawn\" || pos.x !== cfg.x)\r\n                        )));\r\n    },\r\n    /**\r\n     *\r\n     */\r\n    renderPiece: function(cfg) {\r\n        var cNode, cb = this.get(CONTENTBOX);\r\n\r\n        cNode = Y.Node.create(\"<div class=\\\"chess-piece \"\r\n                + \"chess-piece-\" + cfg.name + cfg.side                      // Piece unique identifier\r\n                + ((cfg.side === this.side) ? \" chess-piece-playable \" : \"\")// wether it's playable or not\r\n                + \" chess-side\" + cfg.side\r\n                + \" chess-\" + cfg.type + \"\\\"></div>\");                      // piece type\r\n\r\n        cNode.setStyles(this.formatPos(cfg));\r\n        cNode.cfg = cfg;\r\n        cb.appendChild(cNode);\r\n    },\r\n    unselectCurrentPiece: function() {\r\n        var cb = this.get(CONTENTBOX);\r\n        this.currentTarget = null;\r\n        cb.all(\".chess-piece-selected\").removeClass(\"chess-piece-selected\");\r\n        cb.all(\".chess-move\").remove(true);\r\n    },\r\n    formatPos: function(vec) {\r\n        var WIDTH = 552,\r\n                CASEWIDTH = WIDTH / 8;\r\n        return {\r\n            top: (WIDTH - ((vec.y + 1) * CASEWIDTH)) + \"px\",\r\n            left: (vec.x * CASEWIDTH) + \"px\",\r\n            width: CASEWIDTH,\r\n            height: CASEWIDTH\r\n        };\r\n    },\r\n    /**\r\n     *\r\n     * @param {String} a sting position like a8, b2, etc.\r\n     * @returns {Object} a pos object of type {x: 0, y:0}\r\n     */\r\n    string2pos: function(str) {\r\n        var poses = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\r\n        return {x: poses.indexOf(str.substr(0, 1).toLowerCase()), y: +str.substr(1) - 1};\r\n    },\r\n    pos2string: function(cfg) {\r\n        var poses = [\"a\", \"b\", \"c\", \"d\", \"e\", \"f\", \"g\", \"h\"];\r\n        return poses[cfg.x] + (cfg.y + 1);\r\n    },\r\n    name2type: function(str) {\r\n        return str.replace(/[0-9]/g, \"\");\r\n    }\r\n});\r\n\r\nY.namespace(\"Wegas\").ChessBoard = ChessBoard;"
        }
    },
    "properties": {
        "freeForAll": "true",
        "websocket": "732a1df75d93d028e4f9"
    },
    "pages": {
        "1": {
            "direction": "vertical",
            "type": "List",
            "cssClass": "layout",
            "children": [
                {
                    "type": "Linkwidget"
                },
                {
                    "type": "ChessBoard"
                },
                {
                    "type": "Chat",
                    "cssClass": "wegas-chat"
                }
            ]
        }
    }
}
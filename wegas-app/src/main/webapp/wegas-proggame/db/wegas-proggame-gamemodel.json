{
    "@class": "GameModel",
    "name": "Programming Game",
    "childVariableDescriptors": [{
            "@class": "NumberDescriptor",
            "name": "money",
            "defaultInstance": {
                "@class": "NumberInstance",
                "value": 0
            },
            "scope": {
                "@class": "PlayerScope"
            },
            "minValue": null,
            "maxValue": null
        }, {
            "@class": "NumberDescriptor",
            "name": "currentLevel",
            "defaultInstance": {
                "@class": "NumberInstance",
                "value": 3
            },
            "scope": {
                "@class": "PlayerScope"
            },
            "minValue": null,
            "maxValue": null
        }, {
            "@class": "InboxDescriptor",
            "name": "inbox",
            "defaultInstance": {
                "@class": "InboxInstance",
                "messages": []
            },
            "scope": {
                "@class": "PlayerScope"
            },
            "label": null,
            "description": null
        }, {
            "@class": "InboxDescriptor",
            "name": "files",
            "defaultInstance": {
                "@class": "InboxInstance",
                "messages": []
            },
            "scope": {
                "@class": "PlayerScope"
            },
            "label": null,
            "description": null
        }],
    "properties": {
        "cssUri": "wegas-proggame/css/wegas-proggame.css",
        "pagesUri": "wegas-proggame/db/wegas-proggame-pages.json?"
    },
    "clientScriptLibrary": {
        "load": {
            "@class": "GameModelContent",
            "contentType": null,
            "content": "Y.use(\"layout\", function (Y) { Y.Wegas.Layout.EDITMENU[1].plugins[0].cfg.children.push( { type: \"Button\", label: \"ProgGame Level\", plugins: [{fn: \"AddChildWidgetAction\", cfg: {\"childType\": \"ProgGameLevel\"}}]}); });"
        }
    },
    "scriptLibrary": {
        "default": {
            "@class": "GameModelContent",
            "content": "var ret = [], cObject, level;\r\n\r\nfunction resetActions () {\r\n    for (var i = 0; i < level.objects.length; i++) {\r\n        level.objects[i].actions = level.objects[i].defaultActions;\r\n        sendCommand({\r\n            type: \"updated\",\r\n            object: level.objects[i].clone()\r\n        });\r\n    }\r\n}\r\nfunction run (playerFn, lvl) {\r\n    var i;\r\n    level = lvl;\r\n\r\n    //\"sendCommand({type:'resetLevel', objects: \" + Y.JSON.stringify(this.get(\"objects\")) + \"});\"\r\n\r\n    for (i = 0; i < level.objects.length; i += 1) {\r\n        level.objects[i].defaultActions = level.objects[i].actions;\r\n    }\r\n\r\n    if (level.onStart) {\r\n        eval(level.onStart);\r\n    }\r\n\r\n    for (i = 0; i < level.maxTurns; i += 1) {\r\n\r\n        log('Turn ' + (i + 1));\r\n\r\n        for (j = 0; j < level.objects.length; j += 1) {\r\n\r\n            if (checkGameOver()) continue;\r\n\r\n            o = level.objects[j];\r\n            if (o.ai) {\r\n                log(o.id + ' turn');\r\n                cObject = o.id;\r\n                eval(o.ai);\r\n            }\r\n            if (o.id === \"Player\") {\r\n                log('Player turn');\r\n                cObject = 'Player';\r\n                playerFn.apply(this, values(getArgs()));\r\n            }\r\n        }\r\n\r\n        resetActions();\r\n    }\r\n    if (!checkGameOver()) {\r\n        log('It\\'s lost.');\r\n    }\r\n\r\n    return ret;\r\n}\r\n\r\nfunction sendCommand(cfg) {\r\n    ret.push(cfg);\r\n}\r\nfunction log (text) {\r\n    ret.push({\r\n        type: 'log',\r\n        text: text\r\n    });\r\n}\r\nvar args = {};\r\nfunction pushArg(name, val) {\r\n    args[name] = val;\r\n}\r\nfunction getArgs() {\r\n    return args;\r\n}\r\nfunction consumeActions(object, actions) {\r\n    if (object.actions - actions < 0) {\r\n        //log(\"Not enough actions\");\r\n        return false;\r\n    }\r\n    object.actions -= actions;\r\n    return true;\r\n}\r\nvar said = \"\";\r\nfunction say(msg) {\r\n    var object = findObject(cObject);\r\n\r\n    if (checkGameOver()) return;\r\n\r\n    /*if (!consumeActions(object, 1)) {\r\n        log(\"Not enough actions to say something\");\r\n        return;\r\n    }*/\r\n\r\n    log(object.id + \" says \\\"\" + msg + \"\\\"\" );\r\n    said = msg;\r\n}\r\n\r\nfunction move() {\r\n    var object = findObject(cObject),\r\n    moveV = dirToVector(object.direction);\r\n\r\n    if (checkGameOver()) return;\r\n\r\n    if (!consumeActions(object, 1)) {\r\n        log(\"Not enough actions to move\");\r\n        return;\r\n    }\r\n\r\n    if (checkCollision(cObject, object.x + moveV.x, object.y + moveV.y)) {\r\n        log(\"Something is blocking the way\");\r\n    } else {\r\n        object.x += moveV.x;\r\n        object.y += moveV.y;\r\n        sendCommand({\r\n            type: 'move',\r\n            object: object.clone()\r\n        });\r\n    }\r\n\r\n}\r\nfunction rotate (dir) {\r\n    var object = findObject(cObject);\r\n\r\n    if (checkGameOver()) return;\r\n\r\n    if (!consumeActions(object, 1)) {\r\n        log(\"Not enough actions to rotate.\");\r\n        return;\r\n    }\r\n    object.direction += dir;\r\n    if (object.direction > 4) object.direction = 1;\r\n    if (object.direction < 1) object.direction = 4;\r\n    sendCommand({\r\n        type: 'move',\r\n        object: object.clone()\r\n    });\r\n}\r\nfunction right () {\r\n    rotate(1);\r\n}\r\nfunction left () {\r\n    rotate(-1);\r\n}\r\n\r\nfunction fire () {\r\n    var i, source = findObject(cObject);\r\n    println(\"fire\" + source.actions);\r\n\r\n    if (checkGameOver()) return;\r\n\r\n    if (!consumeActions(source, 1)) {\r\n        log(\"Not enough actions to fire.\");\r\n        return;\r\n    }\r\n\r\n    sendCommand({\r\n        type: 'fire',\r\n        object: source.clone()\r\n    });\r\n\r\n    var colidee, dirV = dirToVector(source.direction);\r\n\r\n    for (i = 0; i <= source.range; i++) {\r\n        colidee = checkCollision(cObject, source.x + (i * dirV.x), source.y + (i * dirV.y));\r\n        if (colidee) {\r\n            colidee.life = 0;\r\n            sendCommand({\r\n                type: 'die',\r\n                object: colidee.clone()\r\n            });\r\n        }\r\n    }\r\n}\r\n\r\nfunction checkCollision(sourceId, x, y) {\r\n    var o, k, objects = level.objects;\r\n    for (k=0; k < objects.length; k++) {\r\n        o = objects[k];\r\n        if (o.x === x && o.y === y && o.id !== sourceId &&\r\n            (o.collides === undefined || o.collides)) {\r\n            return objects[k];\r\n        }\r\n    }\r\n    return null;\r\n}\r\n\r\nvar gameOverSent = false;\r\nfunction checkGameOver (cfg) {\r\n    if (gameOverSent) {\r\n        return true;\r\n    } else if (eval(level.winningCondition)) {\r\n        gameOverSent = true;\r\n        log(\"You won!\");\r\n        ret.push({\r\n            type: \"gameWon\"\r\n        });\r\n        return true;\r\n    }\r\n    return false;\r\n}\r\nfunction findObject (id) {\r\n    var objects = level.objects;\r\n    for (var i = 0; i < objects.length; i = i + 1) {\r\n        if (objects[i].id === id) {\r\n            return objects[i];\r\n        }\r\n    }\r\n    return null;\r\n}\r\nObject.prototype.clone = function () {\r\n    var newObj = (this instanceof Array) ? [] : {};\r\n    for (var i in this) {\r\n        if (i == 'clone')\r\n            continue;\r\n        if (this[i] && typeof this[i] == \"object\") {\r\n            newObj[i] = this[i].clone();\r\n        } else\r\n            newObj[i] = this[i]\r\n    }\r\n    return newObj;\r\n};\r\n// *** Utilities *** //\r\nfunction dirToVector(dir) {\r\n    var dirX = 0, dirY = 0;\r\n    switch (dir) {\r\n        case 1:\r\n            dirY = 1;\r\n            break;\r\n        case 2:\r\n            dirX = 1;\r\n            break;\r\n        case 3:\r\n            dirY = -1;\r\n            break;\r\n        case 4:\r\n            dirX = -1;\r\n            break;\r\n    }\r\n    return {\r\n        x: dirX,\r\n        y: dirY\r\n    };\r\n}\r\nfunction values(object) {\r\n    var ret = [], i;\r\n    for (i in object) {\r\n        ret.push(object[i]);\r\n    }\r\n    return ret;\r\n}"
        }
    }
}
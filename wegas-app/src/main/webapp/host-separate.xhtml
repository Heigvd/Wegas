<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets" >

    <ui:composition template="wegas-app/jsf/app-default.xhtml">

        <ui:define name="title">#{editorGameController.currentGame.name}</ui:define>

        <ui:define name="head">

            <link rel="stylesheet" type="text/css" href="#{request.contextPath}/wegas-editor/css/wegas-editor-min.css" />
            <link rel="stylesheet" type="text/css" href="#{request.contextPath}/wegas-editor/css/wegas-host-min.css" />

            <!-- Stylesheets from current game model style library -->
            <style type="text/css">#{editorGameController.styleSheets}</style>

            <!-- Stylesheets from current game model cssUri property -->
            <ui:repeat rendered="#{editorGameController.currentGameModel.properties.cssUri != ''}"
                       var="o" value="#{editorGameController.currentGameModel.properties.cssUri.split(';')}" varStatus="status">
                <link rel="stylesheet" type="text/css" href="#{request.contextPath}/#{o.trim()}?#{wegasConfig.timestamp}" />
            </ui:repeat>

        </ui:define>

        <ui:define name="body">

            <!-- Client script for current game model -->
            <ui:repeat rendered="#{editorGameController.currentGameModel.properties.clientScriptUri != ''}"
                       var="o" value="#{editorGameController.currentGameModel.properties.clientScriptUri.split(';')}" varStatus="status">
                <script type="text/javascript" src="#{o.trim()}?#{wegasConfig.timestamp}"></script>
            </ui:repeat>

            <script type="text/javascript">
                YUI().use("wegas-app", "wegas-scripteval", "wegas-websocketlistener", function(Y) {
                    var app = new Y.Wegas.App({
                        dataSources: {
                            Variable: {
                                source: "rest/Editor/GameModel/#{editorGameController.currentGameModel.id}/VariableDescriptor",
                                //source: "rest/EditorPrivate/#{editorGameController.currentPlayer.id}/GameModel/#{editorGameController.currentGameModel.id}/VariableDescriptor",
                                initialRequest: "",
                                plugins: [{
                                        fn: "VariableDescriptorCache"
                                    }, {
                                        fn: "ScriptEval"
                                    }, {
                                        fn: "WebSocketListener",
                                        cfg: {
                                            dataSource: "Pusher"
                                        }
                                    }, {
                                        fn: "ServerLog"
                                    }]
                            },
                            Page: {
                                /* THIS IS NOT A COMMENT
                                 * <ui:fragment rendered="#{editorGameController.currentGameModel.properties.pagesUri == ''}">
                                 */
                                source: "rest/GameModel/#{editorGameController.currentGameModel.id}/Page/",
                                /* THIS IS NOT A COMMENT
                                 * </ui:fragment>
                                 */
                                /* THIS IS NOT A COMMENT
                                 * <ui:fragment rendered="#{editorGameController.currentGameModel.properties.pagesUri != ''}">
                                 */
                                source: "#{editorGameController.currentGameModel.properties.pagesUri}",
                                    /* THIS IS NOT A COMMENT
                                     * </ui:fragment>
                                     */
                                    initialFullRequest: 'wegas-app/db/wegas-host-layout.json',
                                //initialRequest 'EditorLayout',
                                plugins: [{
                                        fn: "JSONSchema"
                                    }, {
                                        fn: "PageCache"
                                    }]
                            },
                            GameModel: {
                                source: "rest/Editor/GameModel",
                                initialRequest: "/#{editorGameController.currentGameModel.id}",
                                plugins: [{
                                        fn: "GameModelCache",
                                        cfg: {
                                            currentGameModelId: #{editorGameController.currentGameModel.id}
                                        }
                                    }]
                            },
                            Game: {
                                source: "rest/Public/GameModel/#{editorGameController.currentGameModel.id}/Game",
                                initialRequest: "/#{editorGameController.currentGame.id}",
                                plugins: [{
                                        fn: "GameCache",
                                        cfg: {
                                            currentGameId: #{editorGameController.currentGame.id},
                                            currentTeamId: #{editorGameController.currentPlayer.team.id},
                                            currentPlayerId: #{editorGameController.currentPlayer.id}
                                        }
                                    }]
                            },
                            User: {
                                source: "rest/Extended/User",
                                initialRequest: "/#{requestController.currentUser.id}",
                                plugins: [{
                                        fn: "UserCache",
                                        cfg: {
                                            currentUserId: #{requestController.currentUser.id}
                                        }
                                    }]
                            },
                            Role: {
                                source: "rest/Role",
                                plugins: [{
                                        fn: "WegasCache"
                                    }]
                            },
                            /* THIS IS NOT A COMMENT
                             * <ui:fragment rendered="#{editorGameController.currentGameModel.properties.websocket != ''}">
                             */
                            Pusher: {
                                type: "PusherDataSource",
                                source: "rest/Pusher/",
                                applicationKey: "#{editorGameController.currentGameModel.properties.websocket}"
                            },
                            /* THIS IS NOT A COMMENT
                             * </ui:fragment>
                             */
                            File: {
                                source: "rest/GameModel/#{editorGameController.currentGameModel.id}/File/",
                                plugins: [{
                                        fn: "JSONSchema"
                                    }]
                            }
                        }
                    });

                    app.render();                                               // Render app

                    app.after("render", function() {                            // When the page is rendered
                        var g = Y.Wegas.Facade.Game.cache.getCurrentGame();
                        Y.one(".wegas-title").setContent("&lt;div>" + g.get("name") + "&lt;/div>"
                            + "&lt;div class='subtitle'>" + g.get("gameModelName") + "&lt;/div>");// Update the title

                        var playersTree = Y.Widget.getByNode(".wegas-editor-treeview-team");

                        if (!Y.Wegas.Facade.GameModel.cache.getCurrentGameModel().get("properties.freeForAll")) {
                            playersTree.treeView.plug(Y.Plugin.TeamSelection);
                        }

                        playersTree.on(["treeleaf:click", "treenode:click"], function(e) {// Listen to click events on the first child (treeview)
                            var entity = e.target.get("data.entity"),
                                player = (entity instanceof Y.Wegas.persistence.Team) ? entity.get("players")[0] : entity;

                            if (!player) {
                                this.showMessage("info", "This team is empty", 4000);
                            } else if (!e.currentTarget.treeView.treeviewselect) {//Check if click is with multiselect plugin (impact page)
                                Y.Wegas.Facade.Game.cache.set('currentPlayerId', player.get("id"));
                            }
                        });

                        // Run game model specific scripts
                        try {
                            #{editorGameController.getClientScripts()}
                        } catch (e) {
                            Y.log("Error running client scripts.", "error");
                        }
                    });

                    // Add button to switch to editor/host mode
                    app.once("render", function() {                             // When the page is rendered
                        var body = Y.one("body"),
                            button = new Y.Wegas.ToggleButton({
                                label: "Enable edition",
                                cssClass: "wegas-advanced-feature"
                            }).render();

                        body.addClass("wegas-hostmode");

                        button.get("boundingBox").addClass("host-switchmode");
                        button.after("pressedChange", function(e) {
                            body.addClass("wegas-loading-after");

                            Y.Wegas.Facade.Page.cache.clear();
                            Y.Wegas.Facade.Page.set("initialFullRequest",
                                e.newVal ? "wegas-app/db/wegas-editor-layout.json" : "wegas-app/db/wegas-host-layout.json");

                            app.widget.destroy();                               // Destroy the current view
                            Y.Wegas.Facade.Page.once("response", function(e) {  // When page data source response arrives,
                                var widgetCfg = e.response.results;
                                Y.Wegas.use(widgetCfg, Y.bind(function() {
                                    app.widget = Y.Wegas.Widget.create(Y.clone(widgetCfg)).render();// Instantiate the root widget and render it
                                    this.fire("render");                        // Fire a render event for some eventual post processing

                                    body.toggleClass("wegas-hostmode")
                                        .toggleClass("wegas-editmode")
                                        .removeClass("wegas-loading-after");
                                }, this));
                            }, this);
                            Y.Wegas.Facade.Page.sendInitialRequest();
                        });
                    });

                    // Handle player change event
                    Y.Wegas.Facade.Game.cache.after('currentPlayerIdChange', function() {// Whenever the current player id changes
                        var player = Y.Wegas.Facade.Game.cache.getCurrentPlayer(),
                            preview = Y.Widget.getByNode(".editor-preview");

                        this.set('currentTeamId', player.get("teamId"));        // Update current teamid

                        preview.showOverlay();                                  // Show a loading overlay in the Preview tab during the request

                        Y.later(10, this, function() {                          // Version 1: All data are loaded, only need to change trigger udate
                            Y.Wegas.Facade.Variable.fire("update");
                            preview.hideOverlay();
                        });

                        //Y.Wegas.Facade.Variable.set("source",                   // Version 2: Only current player data are loaded, need to update the datasource
                        //    //this.get("base") + "rest/EditorPrivate/" + player.get("id")
                        //    Y.Wegas.app.get("base") + "rest/Private/" + player.get("id")
                        //    + "/GameModel/" + Y.Wegas.Facade.GameModel.get("currentGameModelId")
                        //    + "/VariableDescriptor");                         // Retrieve variable instances for the new player
                        //Y.Wegas.Facade.Variable.once("response", preview.hideOverlay, preview);
                    });
                });
            </script>

        </ui:define>

        <!-- User voice -->
        <ui:define name="uservoice_trigger_position">top-right</ui:define>
        <ui:define name="uservoice_trigger_background_color">white</ui:define>
        <ui:define name="uservoice_trigger_color">#03283A</ui:define>

    </ui:composition>
</html>

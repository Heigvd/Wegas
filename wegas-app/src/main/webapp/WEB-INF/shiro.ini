[main]
#sessionManager.sessionDAO = $sessionDAO
#cookie for single sign on
#cookie = org.apache.shiro.web.servlet.SimpleCookie
#cookie.name = www.foo.com.session
#cookie.path = /
#sessionManager.sessionIdCookie = $cookie
#sessionValidationScheduler = org.apache.shiro.session.mgt.ExecutorServiceSessionValidationScheduler
#sessionValidationScheduler.interval = 1800000
#sessionManager.sessionValidationScheduler = $sessionValidationScheduler

#sessionManager = org.apache.shiro.web.session.mgt.DefaultWebSessionManager
sessionManager = com.wegas.core.security.util.ShiroSessionManager
sessionManager.globalSessionTimeout = 3600000

# For shiro >= 1.7.0
# Explicit url rewriting must be set in order to work with special chars (File management needs that)
sessionManager.sessionIdUrlRewritingEnabled = true
invalidRequest = org.apache.shiro.web.filter.InvalidRequestFilter
invalidRequest.blockNonAscii = false

#RequestFilter unmodified default values
#invalidRequest.blockBackslash = true
#invalidRequest.blockSemicolon = true

activeSessionsCache = com.wegas.core.security.util.ShiroCacheImplementation
sessionDAO = org.apache.shiro.session.mgt.eis.EnterpriseCacheSessionDAO
sessionDAO.activeSessionsCache = $activeSessionsCache
sessionManager.sessionDAO = $sessionDAO

#
# Using a global cache means that caches for permissions are set up.
# This would mean updating them as soon as permissions change.
# This is too much effort
#cacheManager = com.wegas.core.security.util.ShiroCacheManager
#securityManager.cacheManager = $cacheManager

securityManager.sessionManager = $sessionManager

# Credential Matchers
########################

# Jpa Realm
wegasMatcher = com.wegas.core.security.util.JpaCredentialsMatcher
jpaRealm=com.wegas.core.security.jparealm.JpaRealm
jpaRealm.credentialsMatcher = $wegasMatcher
# jpaRealm.permissionsLookupEnabled=true

# Token Realm
jpaTokenRealm=com.wegas.core.security.token.JpaTokenRealm
jpaTokenRealm.credentialsMatcher = $wegasMatcher

# Guest Realm
allowAllMatcher = org.apache.shiro.authc.credential.AllowAllCredentialsMatcher
guestRealm=com.wegas.core.security.guest.GuestRealm
guestRealm.credentialsMatcher = $allowAllMatcher

# AAI Realm
aaiCredentialsMatcher = com.wegas.core.security.aai.AaiCredentialsMatcher
aaiRealm = com.wegas.core.security.aai.AaiRealm
aaiRealm.credentialsMatcher = $aaiCredentialsMatcher

# Assign realms to security manager
securityManager.realms = $jpaRealm, $guestRealm, $aaiRealm, $jpaTokenRealm

srm = com.wegas.core.security.util.ShiroRememberManager
securityManager.rememberMeManager = $srm
## uncomment next line to disable rememberMe
# securityManager.rememberMeManager = null

# Set authentication filter
authc = com.wegas.core.security.util.AuthenticationFilter
authc.loginUrl = /
authc.successUrl  = /

# Redirect to error page if user does not have access rights
roles.unauthorizedUrl = /wegas-app/jsf/error/accessdenied.html

# Redirect logout to logout page
logout.redirectUrl = /

[urls]
#logout
#/logout=logout
#/logout.html=anon

/index.html=anon
/aai-login.html=anon
/**/*.html=authc

# Login API calls
/rest/Editor/User/Current=anon
/rest/User/Account/Current=anon
/rest/User/AuthMethod/**=anon
/rest/User/Authenticate=anon
/rest/Pusher/ApplicationKey=anon
/rest/User/DefaultAuthMethod=anon
/rest/User/Signup=anon
/rest/Extended/User/Account/AaiConfig=anon
/rest/User/AaiLogin=anon

/rest/**=authc
/openapi/**=authc

# force ssl for login page
#/login.html=ssl[8443], authc

#/**.js=anon
#/**.css=anon
#/**.png=anon
#/**.js=anon
#/**=authc
#/wegas-editor = anon
#/**=authc

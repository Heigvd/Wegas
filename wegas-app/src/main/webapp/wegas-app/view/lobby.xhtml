<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets">

    <ui:composition template="/wegas-app/view/template/app-default.xhtml">

        <ui:define name="head">
            <link rel="stylesheet" type="text/css" href="#{request.contextPath}/wegas-editor/css/wegas-editor.css" />
            <style type="text/css">
                .yui3-skin-sam .editor-createdgametreeview li .yui3-treeleaf-content-header,
                .yui3-skin-sam .editor-createdgametreeview li .yui3-treenode-content-header {
                    cursor: auto;
                }
                .yui3-skin-sam #centerTabView .yui3-tab-label {
                    min-width: 120px;
                }
                .yui3-skin-sam #gameModelsTab {
                    padding-left: 15px;
                }
                /* Move Uservoice widget so it does not overlap right tab */
                #uvTab {
                    border-bottom: 1px solid #FFF !important;
                    border-radius: 4px 4px 4px 4px !important;
                    right: 192px !important;
                    top: -3px !important;
                    bottom: auto !important;
                    left: auto !important;
                }
            </style>
        </ui:define>

        <ui:define name="body">
            <script type="text/javascript">
                YUI().use("wegas-app", function(Y) {

                    var app = new Y.Wegas.App({
                        layoutSrc: 'wegas-app/db/wegas-lobby-layout.json',
                        //debug: true,
                        currentUser: #{requestController.getCurrentUser().toJson()},
                        dataSources: {
                            GameModel: {
                                source: "rest/Public/GameModel",
                                initialRequest: "",
                                plugins: [{
                                        fn: "GameModelCache"
                                    }]
                            },
                            Game: {
                                source: "rest/GameModel//Game",
                                initialRequest: "",
                                plugins: [{
                                        fn: "GameCache"
                                    }]
                            },
                            RegisteredGames: {
                                source: "rest/RegisteredGames/#{requestController.currentUser.id}",
                                initialRequest: "",
                                plugins: [{
                                        fn: "GameCache"
                                    }]
                            },
                            PublicGames: {
                                source: "rest/PublicGames",
                                initialRequest: "/#{requestController.currentUser.id}",
                                plugins: [{
                                        fn: "GameCache"
                                    }]
                            },
                            Role: {
                                source: "rest/Role",
                                //initialRequest: "",
                                plugins: [{
                                        fn: "WegasCache"
                                    }]
                            },
                            User: {
                                source: "rest/Extended/User",
                                initialRequest: "/#{requestController.getCurrentUser().id}",
                                plugins: [{
                                        fn: "UserCache"
                                    }]
                            }
                        }
                    });
                    var refreshTabs = function() {
                        var tab = Y.Widget.getByNode("#gameModelsTab");
                        tab.set("visible", !tab.witem(0).treeView.isEmpty());
                        tab = Y.Widget.getByNode("#gamesTreeViewTab");
                        tab.set("visible", !tab.witem(0).treeView.isEmpty());
                    };

                    app.after("render", function() {                            // If there player is registered to a game
                        if (Y.Wegas.Facade.RegisteredGames.data.length > 0) {
                            Y.Widget.getByNode("#joinedGamesTab").set("selected", 2);// select ongoing games tab
                        }
                        Y.Widget.getByNode("#centerTabView").on("selectionChange", Y.Widget.getByNode("#rightTabView").destroyAll, Y.Widget.getByNode("#rightTabView"));
                        Y.Wegas.ResizableLayout.DEFAULTWIDTH = 500;
                        refreshTabs();

                        Y.Wegas.Facade.Game.cache.on("added", function(e) {     // After a game is created
                            if (e.entity instanceof Y.Wegas.persistence.Game) {

                                var gm = Y.Wegas.Facade.GameModel.cache.findById(e.entity.get("gameModelId"));
                                if (!gm || !gm.get("canView")) {
                                    Y.Wegas.Facade.GameModel.sendInitialRequest();// To refresh game model list
                                }

                                Y.Widget.getByNode("#gamesTreeViewTab").set("selected", 2).set("visible", true);// select the hosted games tab
                                //Y.Wegas.Facade.PublicGames.sendInitialRequest();  // Refresh available game list
                            }
                        });
                    });

                    Y.on("gameJoined", function(e) {                            // As soon as a game is joined
                        window.open(app.get("base") + "wegas-app/view/play.html?gameId=" + e.gameId);// open the game in a new tab

                        if (Y.Widget.getByNode("#availableGamesTab").get("selected") > 0) {
                            Y.Widget.getByNode("#joinedGamesTab").set("selected", 2);// select ongoing games tab
                        }
                        Y.Wegas.Facade.RegisteredGames.sendInitialRequest();    // reload datasource
                        //Y.Wegas.Facade.Games.sendInitialRequest();
                        Y.Wegas.Facade.PublicGames.sendInitialRequest();
                        //Y.Wegas.Facade.GameModel.sendInitialRequest();          // To refresh game model list
                    });

                    app.render();                                               // Launch the editor
                });
            </script>
        </ui:define>
    </ui:composition>
</html>

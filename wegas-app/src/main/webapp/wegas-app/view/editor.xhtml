<?xml version="1.0" encoding="ISO-8859-1" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html">

    <ui:composition template="template/app-default.xhtml">

        <ui:define name="title">#{editorGameController.currentGameModel.name} - #{editorGameController.currentGame.name}</ui:define>

        <ui:define name="head">
            <link rel="stylesheet" type="text/css" href="#{request.contextPath}/wegas-editor/css/wegas-editor.css" />
            <style type="text/css">
                .yui3-skin-sam .yui3-button.wegas-title,
                .yui3-skin-sam .yui3-button.wegas-title:hover  {
                    font-weight: 900;
                    font-size: 22px;
                    line-height: 1.3em;
                    color: #6E6E6E;
                    background: url(../../wegas-app/images/wegas-logoicon-30.png) no-repeat;
                    padding: 0px 25px 0 36px;
                    margin: 8px 6px 6px 10px;
                    height: 30px;
                    text-shadow: 1px 0 1px lightgray, 0 1px 1px lightgray;
                }
            </style>
        </ui:define>
        <ui:define name="body">
            
            <script type="text/javascript"> 
      
              YUI().use("wegas-app",  'wegas-rightscss', /*'wegas-editorcss',*/ function (Y) {
                    var app = new Y.Wegas.App({
                        layoutSrc: 'wegas-app/db/wegas-editor-layout.json',
                        debug : true,
                        currentGameModel: #{editorGameController.currentGameModel.id},
                        currentGame: #{editorGameController.currentGame.id},
                        currentTeam: #{editorGameController.currentPlayer.team.id},
                        currentPlayer: #{editorGameController.currentPlayer.id},
                        currentUser: #{requestController.getCurrentUser().toJson()},

                        dataSources: {
                            "GameModel": {
                                source: "rest/Editor/GameModel",
                                initialRequest: "/#{editorGameController.currentGameModel.id}",
                                plugins: [{
                                        fn: "GameModelCache"
                                    }]
                            },
                            "GameIndex": {
                                source: "rest/Index/GameModel/#{editorGameController.currentGameModel.id}/Game",
                                initialRequest: "/",
                                plugins: [{
                                        fn: "GameCache"
                                    }]
                            },
                            "Game": {
                                source: "rest/Public/GameModel/#{editorGameController.currentGameModel.id}/Game",
                                initialRequest: "/#{editorGameController.currentGame.id}",
                                plugins: [{
                                        fn: "GameCache"
                                    }]
                            },
                            "Page": {

                                <ui:fragment rendered="#{!editorGameController.currentGameModel.properties.containsKey('pagesUri')}">
                                    source: "rest/Page/#{editorGameController.currentGameModel.id}",
                                </ui:fragment>
                                <ui:fragment rendered="#{editorGameController.currentGameModel.properties.containsKey('pagesUri')}">
                                    source: "#{editorGameController.currentGameModel.properties.get('pagesUri')}",
                                </ui:fragment>

                                plugins: [{
                                        fn: "DataSourceJSONSchema",
                                        cfg: {
                                            schema: {
                                                resultListLocator: "."
                                                //resultFields: ["name", "id", "@class"]
                                            }
                                        }
                                    }, {
                                        fn: "PageCache"
                                    }]
                            },
                            "User": {
                                source: "rest/User",
                                initialRequest: "/#{requestController.getCurrentUser().id}",
                                plugins: [{
                                        fn: "UserCache"
                                    }]
                            },
                            "Role": {
                                source: "rest/Role",
                                //initialRequest: "",
                                plugins: [{
                                        fn: "WegasCache"
                                    }]
                            },
                            "VariableDescriptor": {
                                <ui:fragment rendered="#{!editorGameController.currentGameModel.getProperty('allGameVariables')}">
                                    source: "rest/PrivateEditor/#{editorGameController.currentPlayer.id}/GameModel/#{editorGameController.currentGameModel.id}/VariableDescriptor",
                                </ui:fragment>
                                <ui:fragment rendered="#{editorGameController.currentGameModel.getProperty('allGameVariables')}">
                                    source: "rest/Editor/GameModel/#{editorGameController.currentGameModel.id}/VariableDescriptor",
                                </ui:fragment>
                                //source: "rest/Editor/GameModel/#{editorGameController.currentGameModel.id}/VariableDescriptor",
                                initialRequest: "",
                                plugins: [{
                                        fn: "VariableDescriptorCache"
                                    },{
                                        fn: "ScriptEval"
                                    }
                                    <ui:fragment rendered="#{editorGameController.currentGameModel.getProperty('websocket')}">
                                        ,{
                                        fn: "WebSocketListener"
                                        }
                                    </ui:fragment>
                                ]
                            },
                            "File": {
                                source: "rest/File/GameModelId/#{editorGameController.currentGameModel.id}/" ,
                                plugins: [
                                    {
                                        fn: "DataSourceJSONSchema",
                                        cfg: {
                                            schema: {
                                                resultListLocator: "."
                                                //resultFields: ["name", "id", "@class"]
                                            }
                                        }
                                    }
                                ]
                            }
                        },
                        /**
                         * This field is used to override Entities edition menus.
                         * Use the target class name as the key.
                         */
                        editorMenus: {},

                        /**
                         * This field is used to override Entities edition forms.
                         * Use the target class name as the key.
                         */
                        editorForms: {}
                    });

                    app.after("render", function () {
                        var gm = Y.Wegas.GameModelFacade.cache.getCurrentGameModel();
                        Y.one(".wegas-title").setContent(gm.get("name"));


                        try {
                            #{editorGameController.getClientScripts()}      // Display game model specific js footer
                        } catch (e) {
                            Y.log("Error running footer scripts.", "error");
                        }
                    });

                    app.after('currentPlayerChange', function (e) {             // Whenever the current player changes
                        //"rest/Private/xx/GameModel/xx/VariableDescriptor",
                        this.set('currentTeam',
                            this.dataSources.Game.cache.getPlayerById(e.newVal).get("teamId"));// Update current team

                        Y.Wegas.VariableDescriptorFacade.set("source",
                        this.get("base") + "rest/PrivateEditor/" + e.newVal + "/GameModel/"
                            + this.get("currentGameModel") + "/VariableDescriptor");

                        //Y.Wegas.VariableDescriptorFacade.fire("update");      // Fire an update event on the variable datasource
                        Y.Wegas.UserFacade.fire("update");                      // Fire an update event on the variable datasource
                    });

                    app.render();                                               // Render app

                });
            </script>
        </ui:define>
    </ui:composition>
</html>

<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core">

    <ui:composition template="page-default.xhtml">

        <ui:define name="title">#{wegasAppBundle["LobbyPage.Title"]}</ui:define>

        <ui:define name="page">
            <h:body class="yui3-skin-sam yui-skin-sam wegas-widget-loading">

                <ui:fragment rendered="#{!wegasConfig.debug}">
                    <!-- Muscula error tracking -->
                    <script type='text/javascript'>
                        window.Muscula = { settings:{
                                logId:"1f9e3058-27dc-4fec-b633-1070e60f2fca", suppressErrors: false, branding: 'none'
                            }};
                        (function () {
                            var m = document.createElement('script'); m.type = 'text/javascript'; m.async = true;
                            m.src = (window.location.protocol == 'https:' ? 'https:' : 'http:') +
                                '//musculahq.appspot.com/Muscula.js';
                            var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(m, s);
                            window.Muscula.run=function(c){eval(c);window.Muscula.run=function(){};};
                            window.Muscula.errors=[];window.onerror=function(){window.Muscula.errors.push(arguments);
                                return window.Muscula.settings.suppressErrors===undefined;}
                        })();
                    </script>
                </ui:fragment>

                <!-- JSLogger error tracking -->
                <!--<script type="text/javascript">
                        (function () {
                                var jsl=document.createElement('script');jsl.type='text/javascript';jsl.async=true;
                                jsl.src=('https:'==document.location.protocol?'https:':'http:')+'//jslogger.com/jslogger.js';
                                jsl.onload=function(){jslogger=new JSLogger();};
                                var s=document.getElementsByTagName('script')[0];s.parentNode.insertBefore(jsl,s);
                        })();
                </script>-->
                <!-- Proxino error tracking -->
                <!--<script type="text/javascript" src="https://www.proxino.com/p.js"></script>
                <script type="text/javascript">
                    Proxino.key = "yv9rIk-i4Jh7htO2KYDBhw";
                    Proxino.track_errors();
                    //Proxino.log("Hello World!");
                </script>-->

                <!-- Errorception error tracking -->
                <!--<script>
                    var _errs=["509a6af366e7b72724008580"];(function(a,b){a.onerror=function(){_errs.push(arguments)};
                        var d=function(){var a=b.createElement("script"),c=b.getElementsByTagName("script")[0];
                            a.src="//d15qhc0lu1ghnk.cloudfront.net/beacon.js";a.async=!0;
                            c.parentNode.insertBefore(a,c)};a.addEventListener?a.addEventListener("load",d,!1):
                           a.attachEvent("onload",d)})(window,document);
                </script>-->

                <!-- Google Analytics -->
                <!--<script type="text/javascript">
                        var _gaq = _gaq || [];
                        _gaq.push(['_setAccount', 'UA-36197008-1']);
                        _gaq.push(['_setLocalRemoteServerMode']);
                        _gaq.push(['_trackPageview']);

                        (function() {
                                var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                                ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                                var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                        })();
                </script>-->

                <!-- YUI Base -->
                <ui:fragment rendered="#{!wegasConfig.assets_local}">
                    <!-- CDN -->
                    <script type="text/javascript" src="http://yui.yahooapis.com/3.7.2/build/yui/yui-min.js"></script>
                </ui:fragment>
                <ui:fragment rendered="#{wegasConfig.assets_local}">
                    <!-- Self hosted -->
                    <script type="text/javascript" src="/Wegas/lib/yui3/build/yui/yui-min.js"></script>
                </ui:fragment>

                <!-- InputEx Loader -->
                <script src="/Wegas/lib/inputex/src/loader-min.js"  type='text/javascript'></script>

                <!-- Wegas Loader -->
                <ui:fragment rendered="#{wegasConfig.debug}">
                    <script type="text/javascript" src="/Wegas/wegas-app/js/wegas-loader.js"></script>
                </ui:fragment>
                <ui:fragment rendered="#{!wegasConfig.debug}">
                    <script type="text/javascript" src="/Wegas/wegas-app/js/wegas-loader-min.js"></script>
                </ui:fragment>

                <script type="text/javascript">

                    // Set up some YUI3 default parameters. Will be use for every call to
                    // the YUI(cfg) function. Can be overridden by the cfg parameter.
                    YUI_config.useBrowserConsole = true;
                    YUI_config.charset = 'ISO-8859-1';
                    YUI_config.lang = "#{requestController.locale.toLanguageTag()}";
                    YUI_config.insertBefore = 'customstyles';
                    YUI_config.debug = #{wegasConfig.debug};
                    YUI_config.throwFail = true;                                // If throwFail is set, Y.error will generate or re-throw a JS Error. Otherwise the failure is logged.
                    YUI_config.errorFn = function(msg, e, src) {
                        //console.log("ERRORFN", msg, e, src);
                        //Y.log(msg /*+ ( ( e.stack ) ? e.stack : e )*/, "error", 'Wegas.App');
                        //jslogger.log({error: {msg: msg, e: e, src: src}});  //
                        //_gaq.push(['_trackEvent', 'category', 'action', 'opt_label', opt_value]); // Google analytics event
                        //throw msg;
                        return false;                                           // Returning true from this function will stop the Error from being thrown.
                    };
                    //YUI_config.gallery = 'gallery-2011.02.18-23-10';
                    //YUI_config.filter = 'raw';                                // Allows to select normal or minified version of dependencies
                    //YUI_config.filters = { event: 'debug' };                  // Like filter, but can be set for each module
                    //YUI_config.loadOptional = true;
                    //YUI_config.timeout = 10000;
                    //YUI_config.logExclude = { event : true };
                    //YUI_config.logInclude = { event : true };


                    var base = "#{request.requestURL.substring(0, request.requestURL.length() - request.requestURI.length())}#{request.contextPath}",
                    comboBase = base + '/rest/combo?';
                    function setupLocalPath(groupName) {
                        YUI_config.groups[groupName].base = base + YUI_config.groups[groupName].root;// Set up wegas path
                        YUI_config.groups[groupName].comboBase = comboBase;
                        //YUI_config.groups[name].comboBase = comboBase;
                    }
                    setupLocalPath("wegas");
                    YUI_config.groups.inputex.root = "/lib/inputex/src/";       // Set up inputex path
                    setupLocalPath("inputex");
                    setupLocalPath("ace");                                      // Set up ace path
                    setupLocalPath("jsplumb");                                  // Set up jsplumb path
                    setupLocalPath("libraries");                                // Set up libraries path
                </script>

                <ui:fragment rendered="#{!wegasConfig.debug}">
                    <script>
                        YUI_config.groups.inputex.combine = true;
                    </script>
                </ui:fragment>
                <ui:fragment rendered="#{wegasConfig.debug}">
                    <script>
                        YUI_config.groups.wegas.filter = "raw";
                        YUI_config.groups.wegas.combine = false;
                    </script>
                </ui:fragment>

                <!-- local assets -->
                <ui:fragment rendered="#{wegasConfig.assets_local}">
                    <script>
                        YUI_config.comboBase = comboBase;                                   // Force use combo with self hosted yui3
                        YUI_config.filter = "min";
                        YUI_config.combine = true;
                        YUI_config.root = "/lib/yui3/build/";
                    </script>
                </ui:fragment>

                <ui:insert name="body">
                    <script type="text/javascript">
                        var Y = YUI({
                            //filter: 'raw'
                            //filters: { event: 'debug' }
                        }).use('wegas-app', function(Y) {
                            var cfg = {
                                layoutSrc: 'wegas-app/db/wegas-app-layout.json',
                                debug: true,
                                currentGameModel: #{gameController.currentGameModel.id},
                                currentGame: #{gameController.currentGame.id},
                                currentTeam: #{gameController.currentPlayer.team.id},
                                currentPlayer: #{gameController.currentPlayer.id},
                                currentUser: #{requestController.getCurrentUser().toJson()},
                                cssStylesheets: ["#{gameController.currentGameModel.cssUri}"],
                                /**
                                 * This field is used to override Entities edition menus.
                                 * Use the target class name as the key.
                                 */
                                dataSources: {
                                    "GameModel": {
                                        source: "rest/GameModel",
                                        initialRequest: "/#{gameController.currentGameModel.id}",
                                        plugins: [{
                                                fn: "GameModelDataSourceREST"
                                            }]
                                    },
                                    "Game": {
                                        source: "rest/GameModel/#{gameController.currentGameModel.id}/Game",
                                        initialRequest: "/#{gameController.currentGame.id}",
                                        plugins: [{
                                                fn: "GameDataSourceREST"
                                            }
                                        ]
                                    },
                                    "Page": {
                                        source: "#{gameController.currentGameModel.widgetsUri}",
                                        initialRequest: "",
                                        plugins: [{
                                                fn: "DataSourceJSONSchema",
                                                cfg: {
                                                    schema: {
                                                        resultListLocator: "."
                                                        //resultFields: ["name", "id", "@class"]
                                                    }
                                                }
                                            }, {
                                                fn: "PageDataSourceREST"
                                            }
                                        ]
                                    },
                                    "VariableDescriptor": {
                                        source: "rest/Private/#{gameController.currentPlayer.id}/GameModel/#{gameController.currentGameModel.id}/VariableDescriptor",
                                        initialRequest: "",
                                        plugins: [{
                                                fn: "VariableDescriptorDataSourceREST"
                                            }, {
                                                fn: "ScriptEval"
                                            }]
                                    },
                                    "File": {
                                        source: "rest/File/GameModelId/#{gameController.currentGameModel.id}/",
                                        plugins: [{
                                                fn: "DataSourceJSONSchema",
                                                cfg: {
                                                    schema: {
                                                        resultListLocator: "."
                                                        //resultFields: ["name", "id", "@class"]
                                                    }
                                                }
                                            }]
                                    }
                                },
                                /**
                                 * This field is used to override Entities edition menus.
                                 * Use the target class name as the key.
                                 */
                                editorMenus: {},
                                /**
                                 * This field is used to override Entities edition forms.
                                 * Use the target class name as the key.
                                 */
                                editorForms: {}
                            };

                            Y.once('domready', function() {                             // When dom is ready,
                                var app = new Y.Wegas.App(cfg);                         // launch the app
                                app.render();
                            });
                        });
                    </script>
                </ui:insert>
            </h:body>
        </ui:define>
    </ui:composition>
</html>

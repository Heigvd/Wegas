<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core">

    <ui:composition template="page-default.xhtml">

        <ui:define name="title">#{wegasAppBundle["LobbyPage.Title"]}</ui:define>

        <ui:define name="page">
            <h:body class="yui3-skin-sam yui-skin-sam wegas-loading-overlay #{requestController.currentRoles}">

                <ui:fragment rendered="#{wegasConfig.clientErrorLogging}">

                    <!-- Muscula error tracking -->
                    <script type='text/javascript'>
                        window.Muscula = {settings: {
                                logId: "1f9e3058-27dc-4fec-b633-1070e60f2fca", suppressErrors: false, branding: 'none'
                            }};
                        (function () {
                            var m = document.createElement('script');
                            m.type = 'text/javascript';
                            m.async = true;
                            m.src = (window.location.protocol == 'https:' ? 'https:' : 'http:') +
                                '//musculahq.appspot.com/Muscula.js';
                            var s = document.getElementsByTagName('script')[0];
                            s.parentNode.insertBefore(m, s);
                            window.Muscula.run = function (c) {
                                eval(c);
                                window.Muscula.run = function () {
                                };
                            };
                            window.Muscula.errors = [];
                            window.onerror = function () {
                                window.Muscula.errors.push(arguments);
                                return window.Muscula.settings.suppressErrors === undefined;
                            }
                        })();
                    </script>

                    <!-- Google Analytics -->
                    <!--<script type="text/javascript">
                            var _gaq = _gaq || [];
                            _gaq.push(['_setAccount', 'UA-36197008-1']);
                            _gaq.push(['_setLocalRemoteServerMode']);
                            _gaq.push(['_trackPageview']);

                            (function() {
                                    var ga = document.createElement('script'); ga.type = 'text/javascript'; ga.async = true;
                                    ga.src = ('https:' == document.location.protocol ? 'https://ssl' : 'http://www') + '.google-analytics.com/ga.js';
                                    var s = document.getElementsByTagName('script')[0]; s.parentNode.insertBefore(ga, s);
                            })();
                    </script>-->
                </ui:fragment>

                <!-- YUI Base -->
                <ui:fragment rendered="#{wegasConfig.useYUICDN}">
                    <!-- CDN -->
                    <script type="text/javascript" src="http://yui.yahooapis.com/3.7.2/build/yui/yui-min.js"></script>
                </ui:fragment>
                <ui:fragment rendered="#{!wegasConfig.useYUICDN}">
                    <!-- Self hosted -->
                    <script type="text/javascript" src="#{request.contextPath}/lib/yui3/build/yui/yui-min.js"></script>
                </ui:fragment>

                <!-- inputEx Loader -->
                <script src="#{request.contextPath}/lib/inputex/src/loader-min.js"  type='text/javascript'></script>

                <!-- Wegas Loader -->
                <ui:fragment rendered="#{requestController.debugMode()}">
                    <script type="text/javascript" src="#{request.contextPath}/wegas-app/js/wegas-loader.js"></script>
                </ui:fragment>
                <ui:fragment rendered="#{!requestController.debugMode()}">
                    <script type="text/javascript" src="#{request.contextPath}/wegas-app/js/wegas-loader-min.js"></script>
                </ui:fragment>

                <script type="text/javascript">
                    // Set up some YUI3 default parameters. Will be use for every call to
                    // the YUI(cfg) function. Can be overridden by the cfg parameter.
                    YUI_config.useBrowserConsole = true;
                    YUI_config.insertBefore = 'customstyles';
                    YUI_config.lang = "#{requestController.locale.toLanguageTag()}";
                    YUI_config.charset = "#{wegasConfig.encoding}";
                    YUI_config.debug = #{requestController.debugMode()};
                    YUI_config.throwFail = true;                        // If throwFail is set, Y.error will generate or re-throw
                    // a JS Error. Otherwise the failure is logged.
                    YUI_config.errorFn = function (msg, e, src) {
                        // console.log("ERRORFN", msg, e, src);
                        // Y.log(msg /*+ ( ( e.stack ) ? e.stack : e )*/, "error", 'Wegas.App');
                        // jslogger.log({error: {msg: msg, e: e, src: src}});    // Js logger msg
                        // _gaq.push(['_trackEvent', 'category', 'action', 'opt_label', opt_value]); // Google analytics event
                        // throw msg;
                        return false;                      // Returning true from this function will stop the Error from being thrown.
                    };
                    //YUI_config.gallery = 'gallery-2011.02.18-23-10';
                    //YUI_config.filters = { event: 'debug' };                  // Like filter, but can be set for each module
                    //YUI_config.loadOptional = true;

                    var base = "#{request.requestURL
                            .substring(0, request.requestURL.length() - request.requestURI.length())}#{request.contextPath}",
                    comboBase = base + '/rest/combo?';
                    function setupLocalPath (groupName) {
                        YUI_config.groups[groupName].base = base + YUI_config.groups[groupName].root;// Set up wegas path
                        YUI_config.groups[groupName].comboBase = comboBase;
                    }
                    YUI_config.groups.inputex.root = "/lib/inputex/src/";       // Set up inputex path
                    YUI_config.groups.inputex.combine = #{!requestController.debugMode()};
                    YUI_config.groups.wegas.combine = #{!requestController.debugMode()};
                    YUI_config.groups.wegas.filter = (#{requestController.debugMode()}) ? "raw" : "min";// Select raw files
                    setupLocalPath("wegas");
                    setupLocalPath("inputex");
                    setupLocalPath("ace");                                      // Set up ace path
                    setupLocalPath("jsplumb");                                  // Set up jsplumb path
                    setupLocalPath("libraries");                                // Set up libraries path
                </script>

                <ui:fragment rendered="#{!wegasConfig.useYUICDN}">
                    <!-- local assets -->
                    <script>
                        YUI_config.comboBase = comboBase;                       // Force use of self hosted yui3
                        YUI_config.filter = "min";
                        YUI_config.combine = true;
                        YUI_config.root = "/lib/yui3/build/";
                    </script>
                </ui:fragment>

                <ui:insert name="body">
                    <script type="text/javascript">
                        YUI().use('wegas-app', function (Y) {
                            var app = new Y.Wegas.App({
                                layoutSrc: 'wegas-app/db/wegas-app-layout.json',
                                debug: #{requestController.debugMode()},
                                currentGameModel: #{gameController.currentGameModel.id},
                                currentGame: #{gameController.currentGame.id},
                                currentTeam: #{gameController.currentPlayer.team.id},
                                currentPlayer: #{gameController.currentPlayer.id},
                                currentUser: #{requestController.getCurrentUser().toJson()},

                                /**
                                 * This field is used to override Entities edition menus.
                                 * Use the target class name as the key.
                                 */
                                dataSources: {
                                    "GameModel": {
                                        source: "rest/GameModel",
                                        initialRequest: "/#{gameController.currentGameModel.id}",
                                        plugins: [{
                                                fn: "GameModelCache"
                                            }]
                                    },
                                    "Game": {
                                        source: "rest/GameModel/#{gameController.currentGameModel.id}/Game",
                                        initialRequest: "/#{gameController.currentGame.id}",
                                        plugins: [{
                                                fn: "GameCache"
                                            }
                                        ]
                                    },
                                    "Page": {

                                        <ui:fragment rendered="#{!editorGameController.currentGameModel.properties.containsKey('pagesUri')}">
                                            source: "rest/Page/#{editorGameController.currentGameModel.id}",
                                        </ui:fragment>
                                        <ui:fragment rendered="#{editorGameController.currentGameModel.properties.containsKey('pagesUri')}">
                                            source: "#{editorGameController.currentGameModel.properties.get('pagesUri')}",
                                        </ui:fragment>

                                        plugins: [{
                                                fn: "DataSourceJSONSchema",
                                                cfg: {
                                                    schema: {
                                                        resultListLocator: "."
                                                        //resultFields: ["name", "id", "@class"]
                                                    }
                                                }
                                            }, {
                                                fn: "PageCache"
                                            }
                                        ]
                                    },
                                    "VariableDescriptor": {
                                        //source: "rest/Private/#{gameController.currentPlayer.id}/GameModel/#{gameController.currentGameModel.id}/VariableDescriptor",
                                        <ui:fragment rendered="#{!editorGameController.currentGameModel.getProperty('allGameVariables')}">
                                            source: "rest/Private/#{gameController.currentPlayer.id}/GameModel/#{gameController.currentGameModel.id}/VariableDescriptor",
                                        </ui:fragment>
                                        <ui:fragment rendered="#{editorGameController.currentGameModel.getProperty('allGameVariables')}">
                                            source: "rest/Editor/GameModel/#{editorGameController.currentGameModel.id}/VariableDescriptor",
                                        </ui:fragment>
                                        initialRequest: "",
                                        plugins: [{
                                                fn: "VariableDescriptorCache"
                                            }, {
                                                fn: "ScriptEval"
                                            }
                                            <ui:fragment rendered="#{editorGameController.currentGameModel.getProperty('websocket')}">
                                                ,{
                                                fn: "WebSocketListener"
                                                }
                                            </ui:fragment>
                                        ]
                                    },
                                    "User": {
                                        source: "rest/User",
                                        initialRequest: "/" + #{requestController.currentUser.id},
                                        plugins: [{
                                                fn: "UserCache"
                                            }]
                                    },
                                    "File": {
                                        source: "rest/File/GameModelId/#{gameController.currentGameModel.id}/",
                                        plugins: [{
                                                fn: "DataSourceJSONSchema",
                                                cfg: {
                                                    schema: {
                                                        resultListLocator: "."
                                                        //resultFields: ["name", "id", "@class"]
                                                    }
                                                }
                                            }]
                                    }
                                }
                            });

                            app.after("render", function () {
                                try {
                                    #{editorGameController.getClientScripts()}  // Add game model specific js footer
                                } catch (e) {
                                    Y.log("Error running footer scripts.", "error");
                                }
                            });

                            app.render();                                       // Render app
                        });
                    </script>
                </ui:insert>
            </h:body>
        </ui:define>
    </ui:composition>

</html>

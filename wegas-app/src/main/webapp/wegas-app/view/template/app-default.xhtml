<?xml version='1.0' encoding='ISO-8859-1' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html">

    <ui:composition template="page-default.xhtml">

        <ui:define name="title">#{wegasAppBundle["LobbyPage.Title"]}</ui:define>

        <ui:define name="page">
            <h:body class="yui3-skin-sam wegas-stdmode wegas-loading-overlay #{requestController.currentRoles}"> <!-- @fixme currentRoles should not be display on all pages, since login page does not provide for an account nor any role -->

                <ui:fragment rendered="#{wegasConfig.clientErrorLogging}">
                    <!-- Muscula error tracking -->
                    <ui:include src="muscula-tracker.xhtml" />
                </ui:fragment>

                <!-- YUI Base -->
                <ui:fragment rendered="#{wegasConfig.useYUICDN}">
                    <!-- CDN -->
                    <script type="text/javascript" src="http://yui.yahooapis.com/3.11.0/build/yui/yui-min.js"></script>
                </ui:fragment>
                <ui:fragment rendered="#{!wegasConfig.useYUICDN}">
                    <!-- Self hosted -->
                    <script type="text/javascript" src="#{request.contextPath}/lib/yui3/build/yui/yui-min.js"></script>
                </ui:fragment>

                <!-- inputEx Loader -->
                <script src="#{request.contextPath}/lib/inputex/src/loader-min.js"  type='text/javascript'></script>

                <!-- Wegas Loader -->
                <ui:fragment rendered="#{requestController.debugMode()}">
                    <script type="text/javascript" src="#{request.contextPath}/wegas-app/js/wegas-loader.js"></script>
                </ui:fragment>
                <ui:fragment rendered="#{!requestController.debugMode()}">
                    <script type="text/javascript" src="#{request.contextPath}/wegas-app/js/wegas-loader-min.js"></script>
                </ui:fragment>

                <script type="text/javascript">
                    // Set up some YUI3 default parameters. Will be use for every call to
                    // the YUI(cfg) function. Can be overridden by the cfg parameter.
                    YUI_config.useBrowserConsole = true;
                    YUI_config.insertBefore = 'customstyles';
                    YUI_config.lang = "#{requestController.locale.toLanguageTag()}";
                    YUI_config.charset = "#{wegasConfig.encoding}";
                    YUI_config.debug = #{requestController.debugMode()};
                    YUI_config.throwFail = true;                        // If throwFail is set, Y.error will generate or re-throw
                    // a JS Error. Otherwise the failure is logged.
                    YUI_config.errorFn = function(msg, e, src) {
                        // console.log("ERRORFN", msg, e, src);
                        // Y.log(msg /*+ ( ( e.stack ) ? e.stack : e )*/, "error", 'Wegas.App');
                        // _gaq.push(['_trackEvent', 'category', 'action', 'opt_label', opt_value]); // Google analytics event
                        // throw msg;
                        return false;                      // Returning true from this function will stop the Error from being thrown.
                    };
                    //YUI_config.gallery = 'gallery-2011.02.18-23-10';
                    //YUI_config.filters = { event: 'debug' };                  // Like filter, but can be set for each module
                    //YUI_config.loadOptional = true;

                    var base = "#{request.requestURL
                                  .substring(0, request.requestURL.length() - request.requestURI.length())}#{request.contextPath}",
                            comboBase = base + '/rest/combo/?v=#{wegasConfig.timestamp}&amp;';
                    function setupLocalPath(groupName) {
                        YUI_config.groups[groupName].base = base + YUI_config.groups[groupName].root;// Set up wegas path
                        YUI_config.groups[groupName].comboBase = comboBase;
                    }
                    YUI_config.groups.inputex.root = "/lib/inputex/src/";       // Set up inputex path
                    YUI_config.groups.inputex.combine = #{!requestController.debugMode()};
                    YUI_config.groups.wegas.combine = #{!requestController.debugMode()};
                    YUI_config.groups.wegas.filter = (#{requestController.debugMode()}) ? "raw" : "min";// Select raw files
                    setupLocalPath("wegas");
                    setupLocalPath("inputex");
                    setupLocalPath("libraries");                                // Set up libraries path
                </script>

                <ui:fragment rendered="#{!wegasConfig.useYUICDN}">
                    <!-- local assets -->
                    <script type="text/javascript">
                        YUI_config.comboBase = comboBase;                       // Force use of self hosted yui3
                        YUI_config.filter = "min";
                        YUI_config.combine = true;
                        YUI_config.root = "/lib/yui3/build/";
                    </script>
                </ui:fragment>

                <ui:insert name="body">
                    <script type="text/javascript">
                        YUI().use('wegas-app', function(Y) {
                            var app = new Y.Wegas.App({
                                layoutSrc: 'wegas-app/db/wegas-app-layout.json',
                                debug: #{requestController.debugMode()},
                                currentGameModel: #{gameController.currentGameModel.id},
                                currentGame: #{gameController.currentGame.id},
                                currentTeam: #{gameController.currentPlayer.team.id},
                                currentPlayer: #{gameController.currentPlayer.id},
                                currentUser: #{requestController.getCurrentUser().toJson()},
                                /**
                                 * This field is used to override Entities edition menus.
                                 * Use the target class name as the key.
                                 */
                                dataSources: {
                                    GameModel: {
                                        source: "rest/GameModel",
                                        initialRequest: "/#{gameController.currentGameModel.id}",
                                        plugins: [{
                                                fn: "GameModelCache"
                                            }]
                                    },
                                    Game: {
                                        source: "rest/GameModel/#{gameController.currentGameModel.id}/Game",
                                        initialRequest: "/#{gameController.currentGame.id}",
                                        plugins: [{
                                                fn: "GameCache"
                                            }
                                        ]
                                    },
                                    Page: {
                                        /*
                                         *THIS_IS_NOT_A_COMMENT!<ui:fragment rendered="#{!gameController.currentGameModel.properties.containsKey('pagesUri')}">
                                         */
                                        source: "rest/Page/#{gameController.currentGameModel.id}/",
                                        /* THIS IS NOT A COMMENT
                                         * </ui:fragment>
                                         */
                                        /*
                                         *THIS_IS_NOT_A_COMMENT!<ui:fragment rendered="#{gameController.currentGameModel.properties.containsKey('pagesUri')}">
                                         */
                                        source: "#{gameController.currentGameModel.properties.get('pagesUri')}",
                                                /* THIS IS NOT A COMMENT
                                                 * </ui:fragment>
                                                 */

                                                plugins: [{
                                                fn: "DataSourceJSONSchema",
                                                cfg: {
                                                    schema: {
                                                        resultListLocator: "."
                                                                //resultFields: ["name", "id", "@class"]
                                                    }
                                                }
                                            }, {
                                                fn: "PageCache"
                                            }
                                        ]
                                    },
                                    /* THIS IS NOT A COMMENT
                                     * <ui:fragment rendered="#{gameController.currentGameModel.hasProperty('websocket')}">
                                     */
                                    Pusher: {
                                        type: "PusherDataSource",
                                        source: "rest/Pusher/",
                                        applicationKey: "#{gameController.currentGameModel.getProperty('websocket')}"
                                    },
                                    /* THIS IS NOT A COMMENT
                                     * </ui:fragment>
                                     */
                                    VariableDescriptor: {
                                        //source: "rest/Private/#{gameController.currentPlayer.id}/GameModel/#{gameController.currentGameModel.id}/VariableDescriptor",
                                        /* THIS IS NOT A COMMENT
                                         * <ui:fragment rendered="#{!gameController.currentGameModel.getProperty('allGameVariables')}">
                                         */
                                        source: "rest/Private/#{gameController.currentPlayer.id}/GameModel/#{gameController.currentGameModel.id}/VariableDescriptor",
                                        /* THIS IS NOT A COMMENT
                                         * </ui:fragment>
                                         */
                                        /* THIS IS NOT A COMMENT
                                         * <ui:fragment rendered="#{gameController.currentGameModel.getProperty('allGameVariables')}">
                                         */
                                        source: "rest/Editor/GameModel/#{gameController.currentGameModel.id}/VariableDescriptor",
                                                /* THIS IS NOT A COMMENT
                                                 * </ui:fragment>
                                                 */
                                                initialRequest: "",
                                        plugins: [{
                                                fn: "VariableDescriptorCache"
                                            }, {
                                                fn: "ScriptEval"
                                            }
                                            /* THIS IS NOT A COMMENT
                                             * <ui:fragment rendered="#{gameController.currentGameModel.hasProperty('websocket')}">
                                             */
                                            , {
                                                fn: "WebSocketListener",
                                                cfg: {
                                                    dataSource: "Pusher"
                                                }
                                            }
                                            /* THIS IS NOT A COMMENT
                                             * </ui:fragment>
                                             */
                                        ]
                                    },
                                    User: {
                                        source: "rest/Extended/User",
                                        initialRequest: "/" + #{requestController.currentUser.id},
                                        plugins: [{
                                                fn: "UserCache"
                                            }]
                                    },
                                    File: {
                                        source: "rest/File/GameModelId/#{gameController.currentGameModel.id}/",
                                        plugins: [{
                                                fn: "DataSourceJSONSchema",
                                                cfg: {
                                                    schema: {
                                                        resultListLocator: "."
                                                                //resultFields: ["name", "id", "@class"]
                                                    }
                                                }
                                            }]
                                    }
                                }
                            });

                            app.after("render", function() {
                                try {
                        #{gameController.clientScripts}             // Add game model specific js footer
                                } catch (e) {
                                    Y.log("Error running footer scripts.", "error");
                                }
                            });

                            app.render();                                       // Render app
                        });
                    </script>
                </ui:insert>

                <ui:fragment rendered="#{wegasConfig.clientErrorLogging}">
                    <!-- Google Analytics -->
                    <ui:include src="ga-tracker.xhtml" />
                </ui:fragment>

                <!-- UserVoice JavaScript SDK (only needed once on a page) -->
                <script>(function() {
                        var uv = document.createElement('script');
                        uv.type = 'text/javascript';
                        uv.async = true;
                        uv.src = '//widget.uservoice.com/3sN3R6bpdxVxNcGgsuAhQ.js';
                        var s = document.getElementsByTagName('script')[0];
                        s.parentNode.insertBefore(uv, s)
                    })()</script>

                <!-- A tab to launch the Classic Widget -->
                <script>
                    UserVoice = window.UserVoice || [];
                    UserVoice.push(['showTab', 'classic_widget', {
                            mode: 'support',
                            primary_color: '#072544',
                            link_color: '#007dbf',
                            tab_label: 'Feedback &amp; Support',
                            tab_color: '#cc6d00',
                            tab_position: 'bottom-left',
                            tab_inverted: false
                        }]);
                </script>
            </h:body>
        </ui:define>
    </ui:composition>

</html>

<?xml version="1.0" encoding="UTF-8" ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets">

<ui:composition template="wegas-app/jsf/editor-default.xhtml">

    <ui:define
            name="title">#{editorGameController.currentGame.name} - #{editorGameController.currentGameModel.name}</ui:define>

    <ui:define name="editorHeader">
        <link rel="stylesheet" type="text/css" href="#{request.contextPath}/wegas-editor/css/wegas-host-min.css"/>
    </ui:define>

    <ui:define name="pageUri">wegas-app/db/wegas-host-layout.json</ui:define>

    <script>//<ui:define name="editorFooter"><![CDATA[

    Y.Wegas.app.once("render", function() {
        Y.one("body").addClass("wegas-hostmode");

        // Handle switch from host to edit mode
        Y.use("wegas-button", function() {
            var editButton = new Y.Wegas.Button({
                label: "Edit game",
                cssClass: "host-switchmode"
            }).render(".wegas-layout-hd");

            editButton.on("click", function() {
                window.location.replace(window.location.toString().replace("host.", "edit."));
            }, this);
        });

        // Handle player change event
        Y.Wegas.Facade.Game.cache.after('currentPlayerIdChange', function() {// Whenever the current player id changes
            var player = Y.Wegas.Facade.Game.cache.getCurrentPlayer(),
                    preview = Y.Widget.getByNode(".editor-preview");

            this.set('currentTeamId', player.get("teamId"));        // Update current teamid

            preview.showOverlay();                                  // Show a loading overlay in the Preview tab during the request

            Y.later(10, this, function() {                          // Version 1: All data are loaded, only need to change trigger udate
                Y.Wegas.Facade.Variable.fire("update");
                preview.hideOverlay();
            });

            //Y.Wegas.Facade.Variable.set("source",                 // Version 2: Only current player data are loaded, need to update the datasource
            //    //this.get("base") + "rest/EditorPrivate/" + player.get("id")
            //    Y.Wegas.app.get("base") + "rest/Private/" + player.get("id")
            //    + "/GameModel/" + Y.Wegas.Facade.GameModel.get("currentGameModelId")
            //    + "/VariableDescriptor");                         // Retrieve variable instances for the new player
            //Y.Wegas.Facade.Variable.once("response", preview.hideOverlay, preview);
        });
    });

    Y.Wegas.app.on("render", function() {
        Y.use("button", "wegas-console-wysiwyg", "wegas-editor-treeview", function(Y) {
            var playersTree = Y.Widget.getByNode(".wegas-editor-treeview-team"),
                    FFA = Y.Wegas.Facade.GameModel.cache.getCurrentGameModel().get("properties.freeForAll");

            if (!playersTree) {
                return;
            } // Edit mode

            if (!FFA) {
                playersTree.treeView.plug(Y.Plugin.TeamSelection);
            }

            // Switch current player on treeview click
            playersTree.on(["treeleaf:click", "treenode:click"], function(e) {// Listen to click events on the first child (treeview)
                var entity = e.target.get("data.entity"),
                        player = (entity instanceof Y.Wegas.persistence.Team) ? entity.get("players")[0] : entity;

                if (!player) {
                    this.showMessage("info", "This team is empty", 4000);
                    return;
                }

                if (e.currentTarget.treeView.treeviewselect) {          //Check if click is with multiselect plugin
                    return;
                }
                Y.Wegas.Facade.Game.cache.set('currentPlayerId', player.get("id"));
            });
            //Select first available player
            (function() {
                var tw = playersTree.treeView, i, entity;
                for (i = 0; i < tw.size(); i++) {
                    entity = tw.item(i).get("data.entity");
                    if (FFA || entity.get("players")[0]) {
                        tw.item(i).fire("click");
                        tw.item(i).set("selected", 2);
                        break;
                    }
                }
            })();
        });
    });

    Y.Wegas.app.after("render", function() {
        var g = Y.Wegas.Facade.Game.cache.getCurrentGame();
        Y.one(".wegas-title").setContent("<div>" + g.get("name") + "</div>"
                                         + "<div class='subtitle'>" + g.get("gameModelName") + "</div>");// Update the title
    });

    //]]></ui:define></script>

</ui:composition>
</html>

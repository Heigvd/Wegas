<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core">
    <f:loadBundle basename="wegas-app.wegasapp" var="wegasConfig"/>
    <h:head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title><ui:insert name="title">Wegas - 0.2</ui:insert></title>
        <meta name="description" content="" />
        <meta name="keywords" content="" />
        <meta name="robots" content="index, follow" />
        <meta name="contact" content="fx@red-agent.com" />
        <meta name="audience" content="General" />
        <meta name="distribution" content="Global" />
        <meta name="revisit-after" content="30 days" />
        <link rel="icon" type="image/ico" href="/favicon.ico" />

        <ui:fragment rendered="#{!wegasConfig.assets_local}">
            <!-- YUI -->
            <!-- CDN  -->
            <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/combo?3.5.0/build/cssfonts/fonts-min.css&amp;3.5.0/build/cssreset/reset-min.css&amp;3.5.0/build/cssgrids/grids-min.css&amp;3.5.0/build/widget-base/assets/skins/sam/widget-base.css&amp;3.5.0/build/node-menunav/assets/skins/sam/node-menunav.css" />
        </ui:fragment>

        <ui:fragment rendered="#{wegasConfig.assets_local}">
            <!-- Self hosted -->
            <link rel="stylesheet" type="text/css" href="/Wegas/lib/yui3/build/cssfonts/fonts-min.css" />
            <link rel="stylesheet" type="text/css" href="/Wegas/lib/yui3/build/cssreset/reset-min.css" />
        </ui:fragment>

        <meta id="customstyles" />

        <link rel="stylesheet" type="text/css" href="/Wegas/wegas-app/css/treeview-classic.css" />
        <link rel="stylesheet" type="text/css" href="/Wegas/wegas-editor/css/wegas-editor.css" />
        <link rel="stylesheet" type="text/css" href="/Wegas/wegas-app/css/wegas-app.css" />
    </h:head>

    <h:body class="yui3-skin-sam yui-skin-sam">
        <ui:fragment rendered="#{!wegasConfig.assets_local}">
            <!-- YUI Base -->
            <!-- CDN -->
            <script type="text/javascript" src="http://yui.yahooapis.com/combo?3.5.0/build/yui/yui-min.js&amp;3.5.0/build/loader/loader-min.js"></script>
        </ui:fragment>
        <ui:fragment rendered="#{wegasConfig.assets_local}">
            <!-- Self hosted -->
            <script type="text/javascript" src="/Wegas/lib/yui3/build/yui/yui-min.js"></script>
        </ui:fragment>

        <!-- InputEx Loader -->
        <script src="/Wegas/lib/inputex/build/loader.js"  type='text/javascript'></script>

        <!-- Wegas Loader -->
        <script type="text/javascript" src="/Wegas/wegas-app/js/wegas-loader.js"></script>

        <script type="text/javascript">
            YUI_config.groups.inputex.base = '/Wegas/lib/inputex/build/';	// Hack fix inputex loading path so it uses local files
            YUI_config.groups.wegas.base = '/Wegas/';                           // Hack fix wegas loading path so it uses local files
            YUI_config.groups.ace.base = '/Wegas/lib/ace-0.2.0/';               // Hack fix codemirror loading path so it uses local files
            //YUI_config.groups.wireit.base = '/Wegas/lib/wireit/';
            YUI_config.groups.excanvas.base = '/Wegas/lib/excanvas/';
            YUI_config.groups.esprima.base = '/Wegas/lib/esprima/';

            /**<!--
                base : "request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()/>",
                    { name: 'email', label:'E-mail', required: true, regexp: /^[a-z0-9!\#\$%&'\*\-\/=\?\+\-\^_`\{\|\}~]+(?:\.[a-z0-9!\#\$%&'\*\-\/=\?\+\-\^_`\{\|\}~]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,6}$/i },
            -->**/
            var Y = YUI({
                charset: 'utf-8',
                lang: 'en',
                loadOptional: true,
                insertBefore: 'customstyles',
                gallery: 'gallery-2011.02.18-23-10',
                throwFail:true,
                useBrowserConsole: true,
                //debug: Config.debug,
                //timeout: 10000,
                filter: 'raw',
                //filters: { event: 'debug' },
                //logExclude: { event : true },
                //logInclude: { event : true },
                errorFn: function(e) {
                    Y.log('Uncaught error: '+((e.stack)?e.stack:e), 'error', 'Wegas.App');
                },
                groups: {
                    <ui:fragment rendered="#{wegasConfig.assets_local}">
                    /* Set up local version of yui2 TODO: remove that dependency !*/
                    yui2: {
                        base: '/Wegas/lib/yui2in3/build/',
                        // combine: true,
                        // comboBase: 'http://myserver.com/combo?',
                        // root: '/2in3/build/',
                        patterns:  {
                            'yui2-': {
                                configFn: function(me) {
                                    if(/-skin|reset|fonts|grids|base/.test(me.name)) {
                                        me.type = 'css';
                                        me.path = me.path.replace(/\.js/, '.css');
                                        me.path = me.path.replace(/\/yui2-skin/, '/assets/skins/sam/yui2-skin');
                                    }
                                }
                            }
                        }
                    }
                    </ui:fragment>
                }
            }).use(
                <ui:insert name="jsInculde">'wegas-app'</ui:insert>,
            function (Y) {
                var ScopeForm = [
                    { name: 'id', type: 'hidden'},
                    { type: 'select',
                        name: '@class',
                        label: 'Variable is',
                        choices: [
                            { value: "TeamScope", label: 'different for each team' },
                            { value: "PlayerScope", label: 'different for each user' },
                            { value: "GameModelScope", label: 'the same for everybody' }
                        ]
                    }
                ],
                Config = {
                    base : "/Wegas/",
                    layoutSrc: '<ui:insert name="layoutUri">wegas-app/db/wegas-app-layout.json</ui:insert>',
                    lang : 'en-US',
                    debug : true,
                    currentGameModel: #{gameController.currentGameModel.id},
                    currentGame: #{gameController.currentGame.id},
                    currentTeam: #{gameController.currentPlayer.team.id},
                    currentPlayer: #{gameController.currentPlayer.id},
                    cssStylesheets: ["#{gameController.currentGameModel.cssUri}"],
                    dataSources: {
                        "GameModel": {
                            source: "rest/GameModel",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                            // resultFields: ["name", "id", "@class", "errors"]
                                        }
                                    }
                                }, {
                                    fn: "GameModelDataSourceREST"
                                }
                            ]
                        },
                        "Game": {
                            source: "rest/GameModel/#{gameController.currentGameModel.id}/Game",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                            // resultFields: ["name", "id", "@class", "errors"]
                                        }
                                    }
                                }, {
                                    fn: "GameDataSourceREST"
                                }
                            ]
                        },
                        "Page": {
                            source: "#{gameController.currentGameModel.widgetsUri}",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                            //resultFields: ["name", "id", "@class"]
                                        }
                                    }
                                }, {
                                    fn: "DataSourceREST"
                                }
                            ]
                        },
                        "User": {
                            source: "rest/User",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                        }
                                    }
                                }, {
                                    fn: "DataSourceREST"
                                }
                            ]
                        },
                        "VariableDescriptor": {
                            source: "rest/GameModel/#{gameController.currentGameModel.id}/VariableDescriptor",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                        }
                                    }
                                }, {
                                    fn: "VariableDescriptorDataSourceREST"
                                }
                            ]
                        },
                        "File": {
                            source: "rest/File/GameModelId/#{gameController.currentGameModel.id}/" ,
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                            //resultFields: ["name", "id", "@class"]
                                        }
                                    }
                                }
                            ]
                        }
                        /* "Team": {
                            source: "rest/gm/1/Team",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                        }
                                    }
                                }, { fn: "DataSourceREST" }
                            ]
                        },*/
                    },
                    /**  Entities admin menus **/
                    editorMenus: {
                        "Game": [
                            { text: "New team", value: { op:'addChild', childClass: "Team" } },
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "Team": [
                            { text: "New player", value: { op:'addChild', childClass: "Player" } },
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "Player": [
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "StringDescriptor": [
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "NumberDescriptor": [
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "TriggerDescriptor": [
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "ListDescriptor": [
                            { text: "Add element", value: { op:'addChild', childClass: "VariableDescriptor" } },
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "QuestionDescriptor": [
                            { text: "Add a choice", value: { op:'addChild', childClass: "ChoiceDescriptor" } },
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "InboxDescriptor": [
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "Player": [
                            { text: "Delete", value: { op:'delete' } }
                        ],

                        // *** Leader game *** //
                        "TaskDescriptor": [
                            { text: "Delete", value: { op:'delete' } }
                        ],
                        "ResourceDescriptor": [
                            { text: "Delete", value: { op:'delete' } }
                        ]
                    },

                    /** Entities admin Forms **/
                    forms: {
                        "GameModel" : [
                            { name: 'id', type: 'hidden' },
                            { name: 'name', label:'Name', required: true},
                            { name: '@class', value:'GameModel', type: 'hidden'}
                        ],
                        "Game" : [
                            { name: 'id', type: 'hidden' },
                            { name: 'name', label:'Name', required: true},
                            { name: 'token', label:'Token', required: true},
                            { name: '@class', value:'Game', type: 'hidden'}
                        ],
                        "Team" : [
                            { name: 'id', type: 'hidden'},
                            { name: 'gameId', type: 'hidden'},
                            { name: '@class', value:'Team', type: 'hidden'},
                            { name: 'name', label:'Name', required: true},
                            // { name: 'token', label:'Token'},
                        ],
                        "Player" : [
                            { name: 'id', type: 'hidden'},
                            { name: 'teamId', type: 'hidden'},
                            { name: 'name', label:'Name', required: true},
                            { name: '@class', value:'Player', type: 'hidden'}
                        ],
                        "User" : [
                            { name: 'id', type: 'hidden'},
                            { name: 'name', label:'Name', required: true},
                            { name: 'password', type: 'password', label: 'New password', showMsg: true,  id: 'firstPassword', strengthIndicator: true, capsLockWarning: true },
                            { type: 'password', label: 'Confirmation', showMsg: true, confirm: 'firstPassword' },
                            { name: '@class', value:'User', type: 'hidden'}
                        ],
                        "StringDescriptor": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'StringDescriptor'},
                            { name: 'name', label:'Name', required: true},
                            { name: 'scope', type:'group', fields: ScopeForm},
                            { name:'defaultVariableInstance', type:'group', fields: [
                                    { name: '@class', value:'StringInstance', type: 'hidden'},
                                    { name: 'id', type: 'hidden'},
                                    { name: 'value', label: 'Default value'}
                                ]}
                        ],
                        "StringInstance": [
                            { name: '@class', value:'StringInstance', type: 'hidden'},
                            { name: 'id', type: 'hidden'},
                            { name: 'value', label: 'Text'}
                        ],
                        "TriggerDescriptor": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'TriggerDescriptor'},
                            { name: 'name', label:'Name', required: true},
                            { name: 'scope', type:'group', fields: ScopeForm},
                            { name:'defaultVariableInstance', disabled:true, type:'group', fields: [
                                    { name: '@class', value:'TriggerInstance', type: 'hidden'},
                                    { name: 'id', type: 'hidden'},
                                    { name: 'currentStateId', label: 'Initial state'}
                                ]},
                            {name:'triggerEvent', type:'group', fields:[
                                    {name:'@class', value:'Script', type:'hidden'},
                                    {name:'language', label:'Language', type:'select', choices:[{value:'JavaScript'}]},
                                    {name:'content', label:'Condition',type:'text'}
                                ]},
                            {name:'postTriggerEvent', type:'group', fields:[
                                    {name:'@class', value:'Script', type:'hidden'},
                                    {name:'language', label:'Language', type:'select', choices:[{value:'JavaScript'}]},
                                    {name:'content', label:'Impact',type:'text'}
                                ]},
                            { name: 'oneShot', label:'Only once', type:'boolean'}
                        ],
                        "TriggerInstance": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'TriggerInstance'},
                            { name: 'currentStateId', label: "Trigger state", disabled:true}
                        ],
                        "State": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'State'},
                            { name: 'label', label:'Name', required: true},
                            { name:'impact', type:'group', fields: [
                                    { name: '@class', value:'Script', type: 'hidden'},
                                    { name: 'language', value:'JavaScript', type: 'hidden'},
                                    { name: 'content', 'type': 'text', label:'Impact', rows: 3}
                                ]}
                        ],
                        "NumberDescriptor": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'NumberDescriptor'},
                            { name: 'name', label:'Name', required: true},
                            { name: 'scope', type:'group', fields: ScopeForm},
                            { name: 'minValue', label:'Minimum' },
                            { name: 'maxValue', label: "Maximum" },
                            { name:'defaultVariableInstance', type:'group', fields: [
                                    { name: '@class', value:'NumberInstance', type: 'hidden'},
                                    { name: 'id', type: 'hidden'},
                                    { name: 'value', label: 'Default value', regexp: /^[0-9]*$/ }
                                ]}
                        ],
                        "NumberInstance": [
                            { name: '@class', value:'NumberInstance:', type: 'hidden'},
                            { name: 'id', type: 'hidden'},
                            { name: 'value', label: 'Value', regexp: /^[0-9]*$/ }
                        ],
                        "ListDescriptor": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'ListDescriptor'},
                            { name: 'name', label:'Name', required: true},
                            { name: 'scope', type:'group', fields: [
                                    { name: 'id', type: 'hidden'},
                                    { name: '@class', type: 'hidden', value: "GameModelScope" }
                                ]},
                            { name:'defaultVariableInstance', type:'group', fields: [
                                    { name: '@class', value:'ListInstance', type: 'hidden'},
                                    { name: 'id', type: 'hidden'}
                                ]}
                        ],
                        "ListInstance": [
                            { name: '@class', value:'ListInstance', type: 'hidden'},
                            { name: 'id', type: 'hidden'}
                        ],
                        "QuestionDescriptor": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'QuestionDescriptor'},
                            { name: 'scope', type:'group', fields: ScopeForm},
                            { name: 'name', label:'Name', required: true},
                            { name: 'label', label:'Label'},
                            { name: 'allowMultipleReplies', 'label': 'Allow multiple replies', type: 'boolean', value: false},
                            { name:'defaultVariableInstance', type:'group', fields: [
                                    { name: '@class', value:'QuestionInstance', type: 'hidden'},
                                    { name: 'id', type: 'hidden'},
                                    { name: 'active', 'label': 'Active by default', type: 'boolean', value: true}
                                ]},
                            { name: 'description', 'type': 'html', label:'Description', opts: {"width":"100%", height: '80px' }},
                        ],
                        "QuestionInstance": [
                            { name: '@class', value:'QuestionInstance', type: 'hidden'},
                            { name: 'id', type: 'hidden'},
                            { name: 'active', 'label': 'Active', type: 'boolean', value: true},
                            { name: 'unread', 'label': 'Unread', type: 'boolean', value: true}
                        ],
                        "ChoiceDescriptor": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'ChoiceDescriptor'},
                            { name: 'scope', type:'group', fields: ScopeForm},
                            { name: 'name', label:'Name', required: true},
                            { name: 'description', 'type': 'html', label:'Description', opts: {width:'100%', height: '50px'}},
                            { name: 'feedback', 'type': 'html', label:'Feedback', opts: {width:'100%', height: '50px'}},
                            { name:'impact', type:'group', fields: [
                                    { name: '@class', value:'Script', type: 'hidden'},
                                    { name: 'language', value:'JavaScript', type: 'hidden'},
                                    { name: 'content', 'type': 'text', label:'Impact', rows: 3}
                                ]},
                            { name: 'duration', label:'Duration', required: true, value: 1},
                            { name: 'cost', label:'Cost', required: true, value: 1},
                            { name:'defaultVariableInstance', type:'group', fields: [
                                    { name: '@class', value:'ChoiceInstance', type: 'hidden'},
                                    { name: 'id', type: 'hidden'},
                                    { name: 'active', label:'Active by default', type: 'boolean', value: true}
                                ]}
                        ],
                        "ChoiceInstance": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'ChoiceInstance'},
                            { name: 'active', label:'Active', type: 'boolean'}
                        ],

                        // *** Leader Game *** //
                        "ResourceDescriptor": [
                            { name: "id", type: "hidden"},
                            { name: '@class', type: 'hidden', value: "ResourceDescriptor"},
                            { name: 'scope', type:'group', fields: ScopeForm},
                            { name: 'name', label:'Name', required: true},
//                            { name: 'label', label:'Label'},
                            { name: 'description', 'type': 'html', label:'Description', opts: {"width":"100%", height: '80px' }},
                            { name:'defaultVariableInstance', type:'group', fields: [
                                { name: '@class', value:'ResourceInstance', type: 'hidden'},
                                { name: 'id', type: 'hidden'},
                                { name: 'active', 'label': 'Active by default', type: 'boolean', value: true},
                                { name: "properties", "type": "object", label: "Default properties" },
                                { name: "skillset", "type": "object", label: "Default skills" }
                            ]}
                        ],
                        "ResourceInstance": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'ResourceInstance'},
                            { name: 'active', label:'Active', type: 'boolean'},
                            { name: "properties", "type": "object", label: "Properties" },
                            { name: "skillset", "type": "object", label: "Skills" }
                        ],
                        "TaskDescriptor": [
                            { name: "id", type: "hidden"},
                            { name: '@class', type: 'hidden', value: "TaskDescriptor"},
                            { name: 'scope', type:'group', fields: ScopeForm},
                            { name: 'name', label:'Name', required: true},
//                            { name: 'label', label:'Label'},
                            { name: 'duration', label:'Duration', required: true},
                            { name: 'description', 'type': 'html', label:'Description', opts: {"width":"100%", height: '80px' }},
                            { name:'defaultVariableInstance', type:'group', fields: [
                                { name: '@class', value:'TaskInstance', type: 'hidden'},
                                { name: 'id', type: 'hidden'},
                                { name: 'active', 'label': 'Active by default', type: 'boolean', value: true},
                                { name: "properties", "type": "object", label: "Default properties" }
                            ]}
                        ],
                        "TaskInstance": [
                            { name: 'id', type: 'hidden'},
                            { name: '@class', type: 'hidden', value: 'TaskInstance'},
                            { name: 'active', label:'Active', type: 'boolean'},
                            { name: "properties", "type": "object", label: "Properties" }
                        ],

                        //  *** Widgets *** //
                        List: [
                            { name: 'label', label: 'Label'},
                            { name: 'direction', label: 'Direction', type: 'select', choices: [
                                    { value: 'vertical', label: 'Vertical' },
                                    { value: 'horizontal', label: 'Horizontal' }
                                ] },
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'List:', type: 'hidden'}
                        ],
                        VariableDisplay: [
                            { name: 'label', label: 'Label'},
                            { name: 'variable', label: 'Target variable'},
                            { name: 'view', label: 'Display mode', type: 'select', choices: [
                                    { value: 'text', label: 'Text' },
                                    { value: 'button', label: 'Boxes' },
                                    { value: 'gauge', label: 'Gauge' }
                                ] },
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'VariableDisplay:', type: 'hidden'}
                        ],
                        Button: [
                            /*{ name: 'name', label: 'Name'},*/
                            { name: 'label', label: 'Label'},
                            /*{ name: 'targetArea', label: 'Targeted dynamic area element', metatype: 'widgetselect', targetType: 'AlbaDisplayAreaWidget' },
                        { name: 'targetSubpageId', label: 'Page fragment to display', metatype: 'subpageselect'},
                        { name: 'isStoryEvent', label: 'Sends story event', type: 'boolean'},
                        { name: 'inputAction', label: 'On click', type:'text', rows: 8, cols: 60 },*/
                            { name: 'view', label: 'Display mode', type: 'select', choices: [
                                    { value: 'text', label: 'Text' },
                                    { value: 'button', label: 'Button' }
                                ] },
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'Button', type: 'hidden'}
                        ],
                        Text: [
                            { name: 'content', 'type': 'html', label:'Description', opts: {width:'100%', height: '250px'}},
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'Text', type: 'hidden'}
                        ],
                        PageLoader: [
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'PageLoader', type: 'hidden'}
                        ],
                        TabView: [
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'TabView', type: 'hidden'}
                        ],
                        Tab: [
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'Tab', type: 'hidden'}
                        ],
                        PMGChoiceDisplay: [
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'PMGChoiceDisplay', type: 'hidden'}
                        ]
                    }
                };

                Config.forms.ListDescriptor.fields = Config.forms.ListInstance
                Config.forms.VariableDescriptor = [
                    { name: 'valueselector', label:'Variable is', type: 'keyvalue', availableFields: [
                            {type: 'group', name: 'StringDescriptor', label: 'a string',fields: Config.forms.StringDescriptor},
                            {type: 'group', name: 'NumberDescriptor', label: 'a number',fields:  Config.forms.NumberDescriptor },
                            {type: 'group', name: 'QuestionDescriptor', label: 'a question', fields: Config.forms.QuestionDescriptor },
                            {type: 'group', name: 'ListDescriptor', label: 'a list',fields:  Config.forms.ListDescriptor },
                            {type: 'group', name: 'TriggerDescriptor', label: 'a trigger',fields:  Config.forms.TriggerDescriptor },
                            {type: 'group', name: 'ResourceDescriptor', label: 'a resource',fields:  Config.forms.ResourceDescriptor },
                            {type: 'group', name: 'TaskDescriptor', label: 'a task',fields:  Config.forms.TaskDescriptor }
                        ]
                    }
                ];


                    <ui:insert name="jsInitMethod">
                    Y.on('domready', function() {						// Launch the app as soon as Dom is ready
                    var app = new Y.Wegas.App(Config);
                    app.render();
                });
                    </ui:insert>

                });


        </script>
    </h:body>

</html>

<?xml version='1.0' encoding='UTF-8' ?>
<!DOCTYPE html>
<html xmlns="http://www.w3.org/1999/xhtml"
      xmlns:ui="http://java.sun.com/jsf/facelets"
      xmlns:h="http://java.sun.com/jsf/html"
      xmlns:f="http://java.sun.com/jsf/core">

    <f:loadBundle basename="wegas-app.wegasapp" var="wegasConfig"/>

    <h:head>
        <meta http-equiv="Content-Type" content="text/html; charset=UTF-8" />
        <title><ui:insert name="title">Wegas - 0.2</ui:insert></title>
        <meta name="description" content="" />
        <meta name="keywords" content="" />
        <meta name="robots" content="index, follow" />
        <meta name="contact" content="fx@red-agent.com" />
        <meta name="audience" content="General" />
        <meta name="distribution" content="Global" />
        <meta name="revisit-after" content="30 days" />
        <link rel="icon" type="image/ico" href="/favicon.ico" />

        <ui:fragment rendered="#{!wegasConfig.assets_local}">
            <!-- YUI -->
            <!-- CDN  -->
            <link rel="stylesheet" type="text/css" href="http://yui.yahooapis.com/combo?3.6.0/build/cssfonts/fonts-min.css&amp;3.6.0/build/cssreset/reset-min.css&amp;3.6.0/build/cssgrids/grids-min.css&amp;3.6.0/build/widget-base/assets/skins/sam/widget-base.css" />
        </ui:fragment>

        <ui:fragment rendered="#{wegasConfig.assets_local}">
            <!-- Self hosted -->
            <link rel="stylesheet" type="text/css" href="/Wegas/lib/yui3/build/cssfonts/fonts-min.css" />
            <link rel="stylesheet" type="text/css" href="/Wegas/lib/yui3/build/cssreset/reset-min.css" />
            <link rel="stylesheet" type="text/css" href="/Wegas/lib/yui3/build/cssgrids/grids-min.css" />
        </ui:fragment>

        <meta id="customstyles" />

        <link rel="stylesheet" type="text/css" href="/Wegas/wegas-editor/css/treeview.css" />
        <link rel="stylesheet" type="text/css" href="/Wegas/wegas-editor/css/wegas-editor.css" />
        <link rel="stylesheet" type="text/css" href="/Wegas/wegas-app/css/wegas-app.css" />
    </h:head>

    <h:body class="yui3-skin-sam yui-skin-sam">
        <ui:fragment rendered="#{!wegasConfig.assets_local}">
            <!-- YUI Base -->
            <!-- CDN -->
            <script type="text/javascript" src="http://yui.yahooapis.com/combo?3.6.0/build/yui/yui-min.js&amp;3.6.0/build/loader/loader-min.js"></script>
        </ui:fragment>
        <ui:fragment rendered="#{wegasConfig.assets_local}">
            <!-- Self hosted -->
            <script type="text/javascript" src="/Wegas/lib/yui3/build/yui/yui-min.js"></script>
        </ui:fragment>

        <!-- InputEx Loader -->
        <script src="/Wegas/lib/inputex/build/loader.js"  type='text/javascript'></script>

        <!-- Wegas Loader -->
        <script type="text/javascript" src="/Wegas/wegas-app/js/wegas-loader.js"></script>

        <script type="text/javascript">
            YUI_config.groups.inputex.base = '/Wegas/lib/inputex/build/';	// Hack fix inputex loading path so it uses local files
            YUI_config.groups.wegas.base = '/Wegas/';                           // Hack fix wegas loading path so it uses local files
            YUI_config.groups.ace.base = '/Wegas/lib/ace-0.2.0/';               // Hack fix codemirror loading path so it uses local files
            //YUI_config.groups.wireit.base = '/Wegas/lib/wireit/';
            YUI_config.groups.excanvas.base = '/Wegas/lib/excanvas/';
            YUI_config.groups.esprima.base = '/Wegas/lib/';
            YUI_config.groups.jsplumb.base = '/Wegas/' + YUI_config.groups.jsplumb.base;

            <ui:fragment rendered="#{wegasConfig.assets_local}">
            YUI_config.groups.yui2 = {                                          // Set up local version of yui2
                base: '/Wegas/lib/yui2in3/build/',
                // combine: true,
                // comboBase: 'http://myserver.com/combo?',
                // root: '/2in3/build/',
                patterns:  {
                    'yui2-': {
                        configFn: function(me) {
                            if(/-skin|reset|fonts|grids|base/.test(me.name)) {
                                me.type = 'css';
                                me.path = me.path.replace(/\.js/, '.css');
                                me.path = me.path.replace(/\/yui2-skin/, '/assets/skins/sam/yui2-skin');
                            }
                        }
                    }
                }

            };
            </ui:fragment>

            // Set up some YUI3 default parameters. Will be use for every call to
            // the YUI(cfg) function. Can be overridden by the cfg parameter.
            YUI_config.useBrowserConsole = true;
            YUI_config.charset = 'utf-8';
            YUI_config.lang = 'en';
            YUI_config.insertBefore = 'customstyles';
            YUI_config.gallery = 'gallery-2011.02.18-23-10';
            YUI_config.throwFail = true;
            YUI_config.debug = true;
            YUI_config.errorFn = function(e) {
                Y.log('Uncaught error: '+((e.stack)?e.stack:e), 'error', 'Wegas.App');
            };
            //YUI_config.filter = 'raw';                                        // Allows to select normal or minified version of dependencies
            //YUI_config.filters = { event: 'debug' };                          // Like filter, but can be set for each module
            //YUI_config.loadOptional = true;
            //YUI_config.timeout = 10000;
            //YUI_config.logExclude = { event : true };
            //YUI_config.logInclude = { event : true },
            /**<!--
                base : "request.getScheme() + "://" + request.getServerName() + ":" + request.getServerPort()/>",
                    { name: 'email', label:'E-mail', required: true, regexp: /^[a-z0-9!\#\$%&'\*\-\/=\?\+\-\^_`\{\|\}~]+(?:\.[a-z0-9!\#\$%&'\*\-\/=\?\+\-\^_`\{\|\}~]+)*@(?:[a-z0-9](?:[a-z0-9-]*[a-z0-9])?\.)+[a-z]{2,6}$/i },
            -->**/
        </script>

        <ui:insert name="body">
        <script type="text/javascript">
            var Y = YUI({
                //filter: 'raw',
                //filters: { event: 'debug' }
            }).use(
                <ui:insert name="jsInculde">'wegas-app'</ui:insert>,
            function (Y) {
                var cfg = {
                    base : "/Wegas/",
                    layoutSrc: '<ui:insert name="layoutUri">wegas-app/db/wegas-app-layout.json</ui:insert>',
                    lang : 'en-US',
                    debug : true,
                    currentGameModel: #{gameController.currentGameModel.id},
                    currentGame: #{gameController.currentGame.id},
                    currentTeam: #{gameController.currentPlayer.team.id},
                    currentPlayer: #{gameController.currentPlayer.id},
                    currentUser: #{lobbyController.getCurrentUser().toJson()},
                    cssStylesheets: ["#{gameController.currentGameModel.cssUri}"],

                    /**
                    * This field is used to override Entities edition menus.
                    * Use the target class name as the key.
                    */
                    dataSources: {
                        "GameModel": {
                            source: "rest/GameModel",
                            initialRequest: "/#{gameController.currentGameModel.id}",
                            plugins: [{
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                            // resultFields: ["name", "id", "@class", "errors"]
                                        }
                                    }
                                }, {
                                    fn: "GameModelDataSourceREST"
                                }]
                        },
                        "Game": {
                            source: "rest/GameModel/#{gameController.currentGameModel.id}/Game",
                            initialRequest: "/#{gameController.currentGame.id}",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                            // resultFields: ["name", "id", "@class", "errors"]
                                        }
                                    }
                                }, {
                                    fn: "GameDataSourceREST"
                                }
                            ]
                        },
                        "Page": {
                            source: "#{gameController.currentGameModel.widgetsUri}",
                            initialRequest: "",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                            //resultFields: ["name", "id", "@class"]
                                        }
                                    }
                                }, {
                                    fn: "DataSourceREST"
                                }
                            ]
                        },
                        "User": {
                            source: "rest/User",
                            initialRequest: "",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                        }
                                    }
                                }, {
                                    fn: "DataSourceREST"
                                }
                            ]
                        },
                        "VariableDescriptor": {
                            source: "rest/GameModel/#{gameController.currentGameModel.id}/VariableDescriptor",
                            initialRequest: "",
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                        }
                                    }
                                }, {
                                    fn: "VariableDescriptorDataSourceREST"
                                },{
                                    fn: "ScriptEval"
                                }
                            ]
                        },
                        "File": {
                            source: "rest/File/GameModelId/#{gameController.currentGameModel.id}/" ,
                            plugins: [
                                {
                                    fn: "DataSourceJSONSchema",
                                    cfg: {
                                        schema: {
                                            resultListLocator: "."
                                            //resultFields: ["name", "id", "@class"]
                                        }
                                    }
                                }
                            ]
                        }
                    },
                    /**
                    * This field is used to override Entities edition menus.
                    * Use the target class name as the key.
                    */
                    editorMenus: {},

                    /**
                    * This field is used to override Entities edition forms.
                    * Use the target class name as the key.
                    */
                    editorForms: {
                        //  *** Widgets *** //
                        List: [
                            { name: 'label', label: 'Label'},
                            { name: 'direction', label: 'Direction', type: 'select', choices: [
                                    { value: 'vertical', label: 'Vertical' },
                                    { value: 'horizontal', label: 'Horizontal' }
                                ] },
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'List:', type: 'hidden'}
                        ],
                        VariableDisplay: [
                            { name: 'label', label: 'Label'},
                            { name: 'variable', label: 'Target variable'},
                            { name: 'view', label: 'Display mode', type: 'select', choices: [
                                    { value: 'text', label: 'Text' },
                                    { value: 'button', label: 'Boxes' },
                                    { value: 'gauge', label: 'Gauge' }
                                ] },
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'VariableDisplay:', type: 'hidden'}
                        ],
                        Button: [
                            /*{ name: 'name', label: 'Name'},*/
                            { name: 'label', label: 'Label'},
                            /*{ name: 'targetArea', label: 'Targeted dynamic area element', metatype: 'widgetselect', targetType: 'AlbaDisplayAreaWidget' },
                        { name: 'targetSubpageId', label: 'Page fragment to display', metatype: 'subpageselect'},
                        { name: 'isStoryEvent', label: 'Sends story event', type: 'boolean'},
                        { name: 'inputAction', label: 'On click', type:'text', rows: 8, cols: 60 },*/
                            { name: 'view', label: 'Display mode', type: 'select', choices: [
                                    { value: 'text', label: 'Text' },
                                    { value: 'button', label: 'Button' }
                                ] },
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'Button', type: 'hidden'}
                        ],
                        Text: [
                            { name: 'content', 'type': 'html', label:'Description', opts: {width:'100%', height: '250px'}},
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'Text', type: 'hidden'}
                        ],
                        PageLoader: [
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'PageLoader', type: 'hidden'}
                        ],
                        TabView: [
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'TabView', type: 'hidden'}
                        ],
                        Tab: [
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'Tab', type: 'hidden'}
                        ],
                        PMGChoiceDisplay: [
                            { name: 'cssClass', label: 'CSS class'},
                            { name: 'type', value:'PMGChoiceDisplay', type: 'hidden'}
                        ]
                    }
                };

                Y.on('domready', function() {                                   // When dom is ready,

                    <ui:insert name="jsInitMethod">
                    var app = new Y.Wegas.App(cfg);                             // launch the app
                    app.render();
                    </ui:insert>

                });

            });
        </script>
        </ui:insert>
    </h:body>
</html>

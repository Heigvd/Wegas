# This workflow will build a Java project with Maven
# For more information see: https://help.github.com/actions/language-and-framework-guides/building-and-testing-java-with-maven

name: CI

on:
  push:
    branches: [ master ]
  pull_request:
    branches: [ master ]

jobs:
  build:
    runs-on: ubuntu-latest
    services:
      postgres:
        image: postgres:11
        env:
          POSTGRES_USER: user
          POSTGRES_PASSWORD: 1234
          POSTGRES_DB: wegas_test
        options: >-
          --health-cmd pg_isready
          --health-interval 10s
          --health-timeout 5s
          --health-retries 5
        ports:
          - 5432:5432
    steps:
    - uses: actions/checkout@v2
    - name: init submodules
      shell: bash
      env:
        GIT_USER: ${{ secrets.GIT_USER }}
        GIT_TOKEN: ${{ secrets.GIT_TOKEN }}
      run: |
        echo -e "machine github.com\n  login $GIT_USER\n  password $GIT_TOKEN" >> ~/.netrc
        git submodule update --init --recursive
    - name: Cache local Maven repository
      uses: actions/cache@v2
      with:
        path: ~/.m2/repository
        key: ${{ runner.os }}-maven-${{ hashFiles('**/pom.xml') }}
        restore-keys: |
          ${{ runner.os }}-maven-
    - name: Setup Node
      uses: actions/setup-node@v1
      with:
        node-version: '11.10.1'
    - name: Get yarn cache directory path
      id: yarn-cache-dir-path
      run: echo "::set-output name=dir::$(yarn cache dir)"
    - name: Cache local yarn cache
      uses: actions/cache@v2
      id: yarn-cache # use this to check for `cache-hit` (`steps.yarn-cache.outputs.cache-hit != 'true'`)
      with:
        path: ${{ steps.yarn-cache-dir-path.outputs.dir }}
        key: ${{ runner.os }}-yarn-${{ hashFiles('**/yarn.lock') }}
        restore-keys: |
          ${{ runner.os }}-yarn-

    - name: Set up JDK 11
      uses: actions/setup-java@v1
      with:
        java-version: 11
    - name: Guess branch name
      shell: bash
      run: |
        echo "MAVEN_OPTS='-Xms800m -Xmx800m'" > ~/.mavenrc
        echo "BRANCH=$(if [ ${{ github.event_name }}  == pull_request ]; then echo ${{ github.base_ref }}; else echo ${{ github.ref}} | sed -e 's/refs\/heads\///'  ; fi)" >> $GITHUB_ENV 
    - name: Set war name
      shell: bash
      run: echo "WAR_NAME=Wegas_$(if [ ${{ github.event_name }} == pull_request ]; then echo ${{ github.event.number }}_${{ github.head_ref }} ; else echo ${BRANCH}; fi)_${GITHUB_RUN_NUMBER}.war" >> $GITHUB_ENV 
    - name: Patch wegas properties
      shell: bash
      env:
        PR_NAME: ${{ github.head_ref }}
        PR_NUMBER: ${{ github.event.number}}
      run: perl -pi -e 's/(wegas.build.number)=/$1=$ENV{GITHUB_RUN_NUMBER}/;s/(wegas.build.branch)=/$1=$ENV{BRANCH}/;s/(wegas.build.pr_branch)=/$1=$ENV{PR_NAME}/;s/(wegas.build.pr_number)=/$1=$ENV{PR_NUMBER}/;' wegas-core/src/main/resources/wegas.properties
    - name: Build with Maven
      run: mvn -B -P release-profile package --file pom.xml
    - name: Upload
      shell: bash
      run: |
        cp wegas-app/target/Wegas.war /tmp/${WAR_NAME}
        curl -s -F "war=@/tmp/${WAR_NAME}" -H "Authorization:token ${{ secrets.WAR_MANAGER_ADMIN_TOKEN }}" https://manager.albasim.ch/api/branch/upload  > /dev/null
#   - name: clean maven cache
#     shell: bash
#     run: ./clean_repository.sh
